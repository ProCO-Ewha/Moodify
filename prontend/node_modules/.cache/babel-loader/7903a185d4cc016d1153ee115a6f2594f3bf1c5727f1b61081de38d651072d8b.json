{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\FriendDiaryPage.js\",\n  _s = $RefreshSig$();\n// FriendDiaryPage.js\n\n/*import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst FriendDiaryPage = () => {\r\n  const { diaryId } = useParams();\r\n  const [diary, setDiary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDiary = async () => {\r\n      const response = await axios.get(`/api/diaries/${diaryId}`);\r\n      setDiary(response.data);\r\n    };\r\n\r\n    fetchDiary();\r\n  }, [diaryId]);\r\n\r\n  const handleLike = async () => {\r\n    // 좋아요 처리 로직\r\n    await axios.post(`/api/diaries/${diaryId}/like`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {diary && (\r\n        <div>\r\n          <div>{diary.emoji}</div>\r\n          <div>{diary.text}</div>\r\n          <button onClick={handleLike}>Like</button> // 좋아요 버튼 추가\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FriendDiaryPage;*/\n\n// FriendDiaryPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport FriendDiaryList from './FriendDiaryList';\nimport CalendarModal from './CalendarModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FriendDiaryPage = () => {\n  _s();\n  const {\n    friendId,\n    diaryId\n  } = useParams();\n  const [diaries, setDiaries] = useState([]);\n  const [diary, setDiary] = useState(null);\n  const [likes, setLikes] = useState({});\n  const [selectedYearMonth, setSelectedYearMonth] = useState('2024-02');\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const navigate = useNavigate();\n  //const location = useLocation();\n\n  useEffect(() => {\n    const fetchDiaries = async () => {\n      // const response = await axios.get(`/api/diaries/${friendId}/${selectedYearMonth}`);\n      // setDiaries(response.data);\n      setDiaries([{\n        id: 1,\n        content: 'Happy Valentine\\'s Day!',\n        emoji: '😊',\n        date: '2024-02-14'\n      }, {\n        id: 2,\n        content: 'Diary 2',\n        emoji: '😔',\n        date: '2024-03-03'\n      }\n      // ... \n      ]);\n    };\n    const sortedDiaries = diaries.sort((a, b) => new Date(b.date) - new Date(a.date)); // 최신 순으로 정렬\n    setDiaries(sortedDiaries);\n    fetchDiaries();\n  }, [friendId, selectedYearMonth]);\n  useEffect(() => {\n    // diaries가 업데이트된 후에 실행됩니다.\n    const selectedDiary = diaries.find(d => d.id === parseInt(diaryId));\n    setDiary(selectedDiary);\n  }, [diaries, diaryId]); // diaries와 diaryId가 변경될 때마다 실행됩니다.\n\n  const handleClose = () => {\n    const diaryYearMonth = diary.date.slice(0, 7); // 일기의 년-월을 가져옵니다.\n    navigate(`/friend-calendar/${friendId}/${diaryYearMonth}`); // 해당 년-월의 달력 페이지로 이동합니다.\n  };\n  const handleSelectDate = (year, month) => {\n    setSelectedYearMonth(`${year}-${month}`);\n    setCalendarModalShown(false);\n    navigate(`/friend-calendar/${friendId}/${year}-${month}`);\n  };\n  const handleLike = diaryId => {\n    setLikes(prev => ({\n      ...prev,\n      [diaryId]: !prev[diaryId]\n    }));\n  };\n  const handleDiaryClick = diaryId => {\n    navigate(`/friend-diary/${diaryId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalendarModalShown(!calendarModalShown),\n      className: \"button-select-year\",\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: diaries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleDiaryClick(entry.id),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), diary && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Emoji: \", diary.emoji]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Date: \", diary.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Text: \", diary.content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLike(diary.id),\n        children: likes[diary.id] ? 'Unlike' : 'Like'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(FriendDiaryPage, \"1PTAivOB13bFgwGWOZTzrGOBVHQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = FriendDiaryPage;\nexport default FriendDiaryPage;\nvar _c;\n$RefreshReg$(_c, \"FriendDiaryPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","FriendDiaryList","CalendarModal","jsxDEV","_jsxDEV","FriendDiaryPage","_s","friendId","diaryId","diaries","setDiaries","diary","setDiary","likes","setLikes","selectedYearMonth","setSelectedYearMonth","calendarModalShown","setCalendarModalShown","navigate","fetchDiaries","id","content","emoji","date","sortedDiaries","sort","a","b","Date","selectedDiary","find","d","parseInt","handleClose","diaryYearMonth","slice","handleSelectDate","year","month","handleLike","prev","handleDiaryClick","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","onSelect","onClose","style","display","gridTemplateColumns","map","entry","index","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/FriendDiaryPage.js"],"sourcesContent":["// FriendDiaryPage.js\r\n\r\n/*import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst FriendDiaryPage = () => {\r\n  const { diaryId } = useParams();\r\n  const [diary, setDiary] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDiary = async () => {\r\n      const response = await axios.get(`/api/diaries/${diaryId}`);\r\n      setDiary(response.data);\r\n    };\r\n\r\n    fetchDiary();\r\n  }, [diaryId]);\r\n\r\n  const handleLike = async () => {\r\n    // 좋아요 처리 로직\r\n    await axios.post(`/api/diaries/${diaryId}/like`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {diary && (\r\n        <div>\r\n          <div>{diary.emoji}</div>\r\n          <div>{diary.text}</div>\r\n          <button onClick={handleLike}>Like</button> // 좋아요 버튼 추가\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FriendDiaryPage;*/\r\n\r\n\r\n// FriendDiaryPage.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport FriendDiaryList from './FriendDiaryList';\r\nimport CalendarModal from './CalendarModal';\r\n\r\nconst FriendDiaryPage = () => {\r\n  const { friendId, diaryId } = useParams();\r\n  const [diaries, setDiaries] = useState([]);\r\n  const [diary, setDiary] = useState(null);\r\n  const [likes, setLikes] = useState({});\r\n  const [selectedYearMonth, setSelectedYearMonth] = useState('2024-02');\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const navigate = useNavigate();\r\n  //const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const fetchDiaries = async () => {\r\n      // const response = await axios.get(`/api/diaries/${friendId}/${selectedYearMonth}`);\r\n      // setDiaries(response.data);\r\n      setDiaries([ \r\n        { id: 1, content: 'Happy Valentine\\'s Day!', emoji: '😊', date: '2024-02-14' },\r\n        { id: 2, content: 'Diary 2', emoji: '😔', date: '2024-03-03'},\r\n        // ... \r\n      ]);\r\n    };\r\n\r\n    const sortedDiaries = diaries.sort((a, b) => new Date(b.date) - new Date(a.date)); // 최신 순으로 정렬\r\n    setDiaries(sortedDiaries);\r\n\r\n    fetchDiaries();\r\n  }, [friendId, selectedYearMonth]);\r\n\r\n  useEffect(() => {\r\n    // diaries가 업데이트된 후에 실행됩니다.\r\n    const selectedDiary = diaries.find(d => d.id === parseInt(diaryId));\r\n    setDiary(selectedDiary);\r\n  }, [diaries, diaryId]); // diaries와 diaryId가 변경될 때마다 실행됩니다.\r\n\r\n  const handleClose = () => {\r\n    const diaryYearMonth = diary.date.slice(0,7); // 일기의 년-월을 가져옵니다.\r\n    navigate(`/friend-calendar/${friendId}/${diaryYearMonth}`); // 해당 년-월의 달력 페이지로 이동합니다.\r\n  };\r\n\r\n\r\n  const handleSelectDate = (year, month) => {\r\n    setSelectedYearMonth(`${year}-${month}`);\r\n    setCalendarModalShown(false);\r\n    navigate(`/friend-calendar/${friendId}/${year}-${month}`);\r\n  };\r\n\r\n  const handleLike = (diaryId) => {\r\n    setLikes(prev => ({\r\n      ...prev,\r\n      [diaryId]: !prev[diaryId]\r\n    }));\r\n  };\r\n\r\n  const handleDiaryClick = (diaryId) => {\r\n    navigate(`/friend-diary/${diaryId}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{selectedYearMonth}</h2>\r\n      <button onClick={() => setCalendarModalShown(!calendarModalShown)} className=\"button-select-year\">Select Year and Month</button>\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n        {diaries.map((entry, index) => (\r\n          <div key={index} onClick={() => handleDiaryClick(entry.id)}>\r\n            {entry?.emoji}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {\r\n        diary && (\r\n          <div>\r\n            <p>Selected Emoji: {diary.emoji}</p>\r\n            <p>Date: {diary.date}</p>\r\n            <p>Text: {diary.content}</p>\r\n            <button onClick={() => handleLike(diary.id)}>\r\n              {likes[diary.id] ? 'Unlike' : 'Like'}\r\n            </button>\r\n            <button onClick={handleClose}>Close</button>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n    }\r\n\r\nexport default FriendDiaryPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}