{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\n\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\n\n// 가상의 응답을 생성\n/*setDiaryEntries([\r\n  ...diaryEntries,\r\n  newEntry\r\n]);\r\nsetSelectedEmoji('');\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleYearMonthClick = () => {\r\nsetModalOpen(prevState => !prevState);\r\n};\r\nconst handleSelect = (date) => {\r\nsetSelectedYearMonth(date);\r\n};\r\nconst handleClose = () => {\r\nsetModalOpen(false);\r\n};\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\nconst handleOpenEmojiModal = () => {\r\nsetSelectedDiary(null); // 추가된 부분\r\nsetEmojiModalShown(!emojiModalShown);\r\n};\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetAddDiaryModalShown(true); // 추가된 부분\r\n};\r\nconst sortedDiaryEntries = diaryEntries\r\n  .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    const handleOpenDiaryModal = (index) => {\r\n    setIsAdding(false); // 추가된 부분\r\n    setSelectedDiary(sortedDiaryEntries[index]);\r\n    setDiaryModalShown(true);\r\n  };\r\nconst handleCloseDiaryModal = () => {\r\nsetSelectedDiaryIndex(null);\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleOpenSettingPage = () => {\r\nnavigate('/Setting'); // Setting.js로 이동\r\n};\r\nconst handleOpenFindfriendsPage = () =>{\r\nnavigate('/Findfriends');\r\n}\r\nreturn (\r\n<div>\r\n    <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\n/*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n<button onClick={handleOpenEmojiModal}>+</button>\r\n<button onClick={handleOpenSettingPage}>\r\n  <img src=\"/images/setting.png\"/>\r\n</button>\r\n<button onClick={handleOpenFindfriendsPage}>\r\n  <img src=\"/images/user.png\"/>\r\n</button>\r\n\r\n{calendarModalShown && (\r\n<CalendarModal\r\nonSelect={handleSelectDate}\r\nonClose={() => setCalendarModalShown(false)}\r\n/>\r\n)}\r\n{emojiModalShown && (\r\n<EmojiModal\r\nonSelect={handleOpenAddDiaryModal} // 변경된 부분\r\nonClose={() => setEmojiModalShown(false)}\r\n/>\r\n)}\r\n{addDiaryModalShown && (\r\n<AddDiaryModal // 추가된 부분\r\nonAdd={handleAddDiary}\r\nonClose={() => setAddDiaryModalShown(false)}\r\nselectedEmoji={selectedEmoji}\r\n/>\r\n)}\r\n{diaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={handleCloseDiaryModal}\r\n    selectedEmoji={selectedEmoji}\r\n    selectedImage={selectedImage} // New\r\n    setSelectedImage={setSelectedImage} // New\r\n  />\r\n)}\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n{sortedDiaryEntries.map((entry, index) => (\r\n<div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n{entry?.emoji}\r\n</div>\r\n))}\r\n</div>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\n\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\nimport ViewDiaryModal from './ViewDiaryModal';\nimport FriendsList from './FriendsList'; // 추가된 부분\nimport FriendDiaryList from './FriendDiaryList';\nimport { useNavigate } from 'react-router-dom';\nimport './HomeComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [friends, setFriends] = useState([]); // 친구 목록을 저장하는 상태\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [diaries, setDiaries] = useState([]);\n  const navigate = useNavigate();\n\n  /*useEffect(() => {\r\n  axios.get('api/diaryEntries')\r\n  .then(response => setDiaryEntries(response.data));\r\n  }, []);*/\n\n  useEffect(() => {\n    if (selectedYearMonth) {\n      // 가짜 데이터\n      const fakeData = [{\n        date: '2024-01-01',\n        emoji: '😊',\n        text: 'Happy New Year!'\n      }, {\n        date: '2024-01-02',\n        emoji: '😍',\n        text: 'I love the start of the year.'\n      }, {\n        date: '2024-02-14',\n        emoji: '😊',\n        text: 'Happy Valentine\\'s Day!'\n      }];\n      setDiaryEntries(fakeData);\n    }\n  }, [selectedYearMonth]);\n  useEffect(() => {\n    // 친구 목록을 가지고 오는 API 호출\n    axios.get('/api/friends').then(response => setFriends(response.data));\n  }, []);\n  useEffect(() => {\n    // 선택한 친구의 일기 목록을 가지고 오는 API 호출\n    if (selectedFriendId) {\n      axios.get(`/api/diaries/${selectedFriendId}`).then(response => setDiaries(response.data));\n    }\n  }, [selectedFriendId]);\n  const handleAddDiary = (diaryText, selectedDate, selectedImage) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText,\n      image: selectedImage instanceof File ? URL.createObjectURL(selectedImage) : null\n    };\n\n    /*axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });*/\n\n    // 가상의 응답을 생성\n    setDiaryEntries([...diaryEntries, newEntry]);\n    setSelectedEmoji('');\n    setDiaryModalShown(false);\n    setSelectedYearMonth(selectedDate.slice(0, 7));\n    setSelectedImage(null);\n  };\n  const handleEditDiary = (diaryText, selectedDate, index) => {\n    const editedEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n    axios.put(`api/diaryEntries/${index}`, editedEntry).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries[index] = editedEntry;\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleDeleteDiary = index => {\n    axios.delete(`api/diaryEntries/${index}`).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries.splice(index, 1);\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleYearMonthClick = () => {\n    setModalOpen(prevState => !prevState);\n  };\n  const handleSelect = date => {\n    setSelectedYearMonth(date);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleSelectDate = yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n  };\n  const handleOpenEmojiModal = () => {\n    setSelectedDiary(null); // 추가된 부분\n    setEmojiModalShown(!emojiModalShown);\n  };\n  const handleOpenAddDiaryModal = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setAddDiaryModalShown(true); // 추가된 부분\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)) // Add this line\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\n  const handleOpenDiaryModal = index => {\n    setIsAdding(false); // 추가된 부분\n    setSelectedDiary(sortedDiaryEntries[index]);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  const handleOpenSettingPage = () => {\n    navigate('/Setting'); // Setting.js로 이동\n  };\n  const handleOpenFindfriendsPage = () => {\n    navigate('/Findfriends');\n  };\n  const handleLike = id => {\n    // 좋아요 기능을 처리하는 함수\n    // 백엔드 서버에 좋아요 상태를 변경하는 요청을 보내야 합니다.\n    // 이 예제에서는 가상의 기능을 구현하기 위해 상태만 변경합니다.\n    setDiaries(diaries.map(diary => diary.id === id ? {\n      ...diary,\n      isLiked: !diary.isLiked\n    } : diary));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FriendsList, {\n      friends: friends,\n      onSelect: setSelectedFriendId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 5\n    }, this), selectedFriendId && /*#__PURE__*/_jsxDEV(FriendDiaryList, {\n      diaries: diaries,\n      onLike: handleLike\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalendarModalShown(true),\n      className: \"button-select-year\",\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      className: \"button-add-emoji\",\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenSettingPage,\n      className: \"button-settings\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/setting.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenFindfriendsPage,\n      className: \"button-find-friends\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/user.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 5\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleOpenAddDiaryModal // 변경된 부분\n      ,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 3\n    }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(AddDiaryModal, {\n      onAdd: handleAddDiary,\n      onClose: () => setAddDiaryModalShown(false),\n      selectedEmoji: selectedEmoji,\n      selectedImage: selectedImage // 추가된 부분\n      ,\n      setSelectedImage: setSelectedImage // 추가된 부분\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 3\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(ViewDiaryModal, {\n      onClose: handleCloseDiaryModal,\n      selectedDiary: selectedDiary,\n      selectedImage: selectedImage // 추가된 부분\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 3\n    }, this), (selectedDiary === null || selectedDiary === void 0 ? void 0 : selectedDiary.image) && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: selectedDiary.image,\n      alt: \"Diary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 3\n  }, this);\n};\n_s(HomeComponent, \"8PfpAQzp2733V/fMOqMK4cvmIF4=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeComponent;\nexport default HomeComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","AddDiaryModal","ViewDiaryModal","FriendsList","FriendDiaryList","useNavigate","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","selectedImage","setSelectedImage","friends","setFriends","selectedFriendId","setSelectedFriendId","diaries","setDiaries","navigate","fakeData","date","emoji","text","get","then","response","data","handleAddDiary","diaryText","newEntry","image","File","URL","createObjectURL","slice","handleEditDiary","index","editedEntry","put","status","newDiaryEntries","handleDeleteDiary","delete","splice","handleYearMonthClick","prevState","handleSelect","handleClose","handleSelectEmoji","handleSelectDate","yearMonth","handleOpenEmojiModal","handleOpenAddDiaryModal","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenDiaryModal","handleCloseDiaryModal","handleOpenSettingPage","handleOpenFindfriendsPage","handleLike","id","map","diary","isLiked","children","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","onLike","onClick","className","src","onClose","onAdd","alt","style","display","gridTemplateColumns","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  /*setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nreturn (\r\n  <div>\r\n      <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\r\n      /*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedImage={selectedImage} // New\r\n          setSelectedImage={setSelectedImage} // New\r\n        />\r\n      )}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\nexport default HomeComponent;*/\r\n\r\n// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport FriendsList from './FriendsList'; // 추가된 부분\r\nimport FriendDiaryList from './FriendDiaryList'; \r\nimport { useNavigate } from 'react-router-dom';\r\nimport './HomeComponent.css'\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null);\r\nconst [friends, setFriends] = useState([]); // 친구 목록을 저장하는 상태\r\nconst [selectedFriendId, setSelectedFriendId] = useState(null); \r\nconst [diaries, setDiaries] = useState([]);\r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\nuseEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nuseEffect(() => {\r\n  // 친구 목록을 가지고 오는 API 호출\r\n  axios.get('/api/friends')\r\n    .then(response => setFriends(response.data));\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  // 선택한 친구의 일기 목록을 가지고 오는 API 호출\r\n  if (selectedFriendId) {\r\n    axios.get(`/api/diaries/${selectedFriendId}`)\r\n      .then(response => setDiaries(response.data));\r\n  }\r\n}, [selectedFriendId]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => {\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage instanceof File ? URL.createObjectURL(selectedImage) : null};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedYearMonth(selectedDate.slice(0, 7));\r\n  setSelectedImage(null);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nconst handleLike = (id) => {\r\n  // 좋아요 기능을 처리하는 함수\r\n  // 백엔드 서버에 좋아요 상태를 변경하는 요청을 보내야 합니다.\r\n  // 이 예제에서는 가상의 기능을 구현하기 위해 상태만 변경합니다.\r\n  setDiaries(diaries.map(diary => diary.id === id ? { ...diary, isLiked: !diary.isLiked } : diary));\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <FriendsList friends={friends} onSelect={setSelectedFriendId} />\r\n      {selectedFriendId && <FriendDiaryList diaries={diaries} onLike={handleLike} />}\r\n      <h2>{selectedYearMonth}</h2> {/* 선택한 년도와 월 표시 */}\r\n      <button onClick={() => setCalendarModalShown(true)} className=\"button-select-year\">Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal} className=\"button-add-emoji\">+</button>\r\n      <button onClick={handleOpenSettingPage} className=\"button-settings\">\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage} className=\"button-find-friends\">\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n    selectedImage={selectedImage} // 추가된 부분\r\n    setSelectedImage={setSelectedImage} // 추가된 부분\r\n  />\r\n)}\r\n\r\n\r\n{diaryModalShown && (\r\n  <ViewDiaryModal\r\n    onClose={handleCloseDiaryModal}\r\n    selectedDiary={selectedDiary}\r\n    selectedImage={selectedImage} // 추가된 부분\r\n  />\r\n)}\r\n\r\n{selectedDiary?.image && <img src={selectedDiary.image} alt=\"Diary\" />}\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}