{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\n\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\n\n// 가상의 응답을 생성\n/*setDiaryEntries([\r\n  ...diaryEntries,\r\n  newEntry\r\n]);\r\nsetSelectedEmoji('');\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleYearMonthClick = () => {\r\nsetModalOpen(prevState => !prevState);\r\n};\r\nconst handleSelect = (date) => {\r\nsetSelectedYearMonth(date);\r\n};\r\nconst handleClose = () => {\r\nsetModalOpen(false);\r\n};\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\nconst handleOpenEmojiModal = () => {\r\nsetSelectedDiary(null); // 추가된 부분\r\nsetEmojiModalShown(!emojiModalShown);\r\n};\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetAddDiaryModalShown(true); // 추가된 부분\r\n};\r\nconst sortedDiaryEntries = diaryEntries\r\n  .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    const handleOpenDiaryModal = (index) => {\r\n    setIsAdding(false); // 추가된 부분\r\n    setSelectedDiary(sortedDiaryEntries[index]);\r\n    setDiaryModalShown(true);\r\n  };\r\nconst handleCloseDiaryModal = () => {\r\nsetSelectedDiaryIndex(null);\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleOpenSettingPage = () => {\r\nnavigate('/Setting'); // Setting.js로 이동\r\n};\r\nconst handleOpenFindfriendsPage = () =>{\r\nnavigate('/Findfriends');\r\n}\r\nreturn (\r\n<div>\r\n    <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\n/*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n<button onClick={handleOpenEmojiModal}>+</button>\r\n<button onClick={handleOpenSettingPage}>\r\n  <img src=\"/images/setting.png\"/>\r\n</button>\r\n<button onClick={handleOpenFindfriendsPage}>\r\n  <img src=\"/images/user.png\"/>\r\n</button>\r\n\r\n{calendarModalShown && (\r\n<CalendarModal\r\nonSelect={handleSelectDate}\r\nonClose={() => setCalendarModalShown(false)}\r\n/>\r\n)}\r\n{emojiModalShown && (\r\n<EmojiModal\r\nonSelect={handleOpenAddDiaryModal} // 변경된 부분\r\nonClose={() => setEmojiModalShown(false)}\r\n/>\r\n)}\r\n{addDiaryModalShown && (\r\n<AddDiaryModal // 추가된 부분\r\nonAdd={handleAddDiary}\r\nonClose={() => setAddDiaryModalShown(false)}\r\nselectedEmoji={selectedEmoji}\r\n/>\r\n)}\r\n{diaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={handleCloseDiaryModal}\r\n    selectedEmoji={selectedEmoji}\r\n    selectedImage={selectedImage} // New\r\n    setSelectedImage={setSelectedImage} // New\r\n  />\r\n)}\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n{sortedDiaryEntries.map((entry, index) => (\r\n<div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n{entry?.emoji}\r\n</div>\r\n))}\r\n</div>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\n\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport ViewDiaryModal from './ViewDiaryModal';\nimport FriendsList from './FriendsList'; // 추가된 부분\nimport FriendDiaryList from './FriendDiaryList';\nimport { useNavigate } from 'react-router-dom';\nimport './HomeComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [diaries, setDiaries] = useState([]);\n  const navigate = useNavigate();\n  const [friends, setFriends] = useState([]);\n  const [username, setUsername] = useState('');\n  const [token, setToken] = useState('');\n  axios.post('http://localhost:8080/login', {/* 로그인 정보 */}).then(response => {\n    setUsername(response.data.username);\n    setToken(response.data.token);\n  });\n\n  // useEffect 내에서 username과 token, 그리고 선택된 년/월을 사용하여 API를 호출합니다.\n  useEffect(() => {\n    if (username && token && selectedYearMonth) {\n      const [year, month] = selectedYearMonth.split('-');\n      axios.get(`/calendar/${username}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        params: {\n          year,\n          month\n        }\n      }).then(response => {\n        setFriends(response.data.friends);\n        setDiaryEntries(response.data.monthly);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }, [username, token, selectedYearMonth]);\n\n  /*useEffect(() => {\r\n    if (selectedYearMonth) {\r\n      // 가짜 데이터\r\n      const fakeData = [\r\n        { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n        { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n        { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n      ];\r\n      setDiaryEntries(fakeData);\r\n    }\r\n  }, [selectedYearMonth]);*/\n\n  /*useEffect(() => {\r\n    // 선택한 친구의 일기 목록을 가지고 오는 API 호출\r\n    if (selectedFriendId) {\r\n      axios.get(`/api/diaries/${selectedFriendId}`)\r\n        .then(response => setDiaries(response.data));\r\n    }\r\n  }, [selectedFriendId]);*/\n\n  const handleAddDiary = (diaryText, selectedDate, isPublic, selectedEmoji) => {\n    // 백엔드에서 요구하는 데이터 형식에 맞춰 객체를 생성합니다.\n    const newEntry = {\n      emotion: selectedEmoji,\n      // 사용자가 선택한 이모지에 따라서 변경\n      txt: diaryText,\n      privacyStatus: isPublic ? 'PUBLIC' : 'PRIVATE' // isPublic 상태에 따라서 privacyStatus를 설정합니다.\n    };\n    axios.post('/diaries/new', newEntry).then(response => {\n      if (response.status === 201) {\n        // 백엔드에서 201 Created 상태 코드를 반환합니다.\n        // 백엔드에서 새로 생성된 diary의 ID를 반환하므로, 이를 사용하여 newEntry를 업데이트해야 합니다.\n        newEntry.id = response.data;\n        setDiaryEntries([...diaryEntries, newEntry]);\n        setSelectedEmoji('');\n        setDiaryModalShown(false);\n      }\n    });\n  };\n  const handleYearMonthClick = () => {\n    setModalOpen(prevState => !prevState);\n  };\n  const handleSelect = date => {\n    setSelectedYearMonth(date);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleSelectDate = yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n  };\n  const handleOpenEmojiModal = () => {\n    setSelectedDiary(null); // 추가된 부분\n    setEmojiModalShown(!emojiModalShown);\n  };\n  const handleOpenAddDiaryModal = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setAddDiaryModalShown(true); // 추가된 부분\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)) // Add this line\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\n  const handleOpenDiaryModal = index => {\n    setIsAdding(false); // 추가된 부분\n    setSelectedDiary(sortedDiaryEntries[index]);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  const handleOpenSettingPage = () => {\n    navigate('/Setting'); // Setting.js로 이동\n  };\n  const handleOpenFindfriendsPage = () => {\n    navigate('/Findfriends');\n  };\n\n  /*const handleLike = (id) => {\r\n    // 좋아요 기능을 처리하는 함수\r\n    axios.post(`/api/diaries/${id}/like`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaries(diaries.map(diary => diary.id === id ? { ...diary, isLiked: !diary.isLiked } : diary));\r\n        }\r\n      });\r\n  };*/\n\n  const handleFriendClick = friendId => {\n    // 가상의 년도와 월을 사용하여 해당 친구의 달력 페이지로 이동\n    const year = '2024';\n    const month = '02';\n    navigate(`/friend-calendar/${friendId}/${year}-${month}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCalendarModalShown(!calendarModalShown),\n        className: \"button-select-year\",\n        children: \"Select Year and Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 6\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedYearMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 5\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(FriendsList, {\n      friends: friends,\n      onFriendClick: handleFriendClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      className: \"button-add-emoji\",\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenSettingPage,\n      className: \"button-settings\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/setting.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenFindfriendsPage,\n      className: \"button-find-friends\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/user.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleOpenAddDiaryModal // 변경된 부분\n      ,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 3\n    }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(DiaryModal, {\n      onAdd: handleAddDiary,\n      onClose: () => setAddDiaryModalShown(false),\n      selectedEmoji: selectedEmoji\n      //selectedImage={selectedImage} // 추가된 부분\n      //setSelectedImage={setSelectedImage} // 추가된 부분\n      ,\n      isAdding: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 3\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(ViewDiaryModal, {\n      onClose: handleCloseDiaryModal,\n      selectedDiary: selectedDiary\n      //selectedImage={selectedImage} // 추가된 부분\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 3\n  }, this);\n};\n_s(HomeComponent, \"8+8GrpHyUrDrg8oTj+N7xUW9/Cc=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeComponent;\nexport default HomeComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","ViewDiaryModal","FriendsList","FriendDiaryList","useNavigate","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","selectedFriendId","setSelectedFriendId","diaries","setDiaries","navigate","friends","setFriends","username","setUsername","token","setToken","post","then","response","data","year","month","split","get","headers","params","monthly","catch","error","console","handleAddDiary","diaryText","isPublic","newEntry","emotion","txt","privacyStatus","status","id","handleYearMonthClick","prevState","handleSelect","date","handleClose","handleSelectEmoji","emoji","handleSelectDate","yearMonth","handleOpenEmojiModal","handleOpenAddDiaryModal","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenDiaryModal","index","handleCloseDiaryModal","handleOpenSettingPage","handleOpenFindfriendsPage","handleFriendClick","friendId","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onClose","onFriendClick","src","onAdd","style","display","gridTemplateColumns","map","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  /*setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nreturn (\r\n  <div>\r\n      <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\r\n      /*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedImage={selectedImage} // New\r\n          setSelectedImage={setSelectedImage} // New\r\n        />\r\n      )}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\nexport default HomeComponent;*/\r\n\r\n// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport FriendsList from './FriendsList'; // 추가된 부분\r\nimport FriendDiaryList from './FriendDiaryList'; \r\nimport { useNavigate } from 'react-router-dom';\r\nimport './HomeComponent.css'\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedFriendId, setSelectedFriendId] = useState(null); \r\nconst [diaries, setDiaries] = useState([]);\r\nconst navigate = useNavigate();\r\nconst [friends, setFriends] = useState([]);\r\nconst [username, setUsername] = useState('');\r\nconst [token, setToken] = useState('');\r\n\r\naxios.post('http://localhost:8080/login', { /* 로그인 정보 */ })\r\n  .then(response => {\r\n    setUsername(response.data.username);\r\n    setToken(response.data.token);\r\n  });\r\n\r\n// useEffect 내에서 username과 token, 그리고 선택된 년/월을 사용하여 API를 호출합니다.\r\nuseEffect(() => {\r\n  if (username && token && selectedYearMonth) {\r\n    const [year, month] = selectedYearMonth.split('-');\r\n    axios.get(`/calendar/${username}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      },\r\n      params: {\r\n        year,\r\n        month\r\n      }\r\n    })\r\n    .then(response => {\r\n      setFriends(response.data.friends);\r\n      setDiaryEntries(response.data.monthly);\r\n    })\r\n    .catch(error => {\r\n      console.error(error);\r\n    });\r\n  }\r\n}, [username, token, selectedYearMonth]);\r\n\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);*/\r\n\r\n\r\n/*useEffect(() => {\r\n  // 선택한 친구의 일기 목록을 가지고 오는 API 호출\r\n  if (selectedFriendId) {\r\n    axios.get(`/api/diaries/${selectedFriendId}`)\r\n      .then(response => setDiaries(response.data));\r\n  }\r\n}, [selectedFriendId]);*/\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, isPublic, selectedEmoji) => {\r\n  // 백엔드에서 요구하는 데이터 형식에 맞춰 객체를 생성합니다.\r\n  const newEntry = {\r\n    emotion: selectedEmoji, // 사용자가 선택한 이모지에 따라서 변경\r\n    txt: diaryText,\r\n    privacyStatus: isPublic ? 'PUBLIC' : 'PRIVATE' // isPublic 상태에 따라서 privacyStatus를 설정합니다.\r\n  };\r\n\r\n  axios.post('/diaries/new', newEntry)\r\n    .then(response => {\r\n      if (response.status === 201) { // 백엔드에서 201 Created 상태 코드를 반환합니다.\r\n        // 백엔드에서 새로 생성된 diary의 ID를 반환하므로, 이를 사용하여 newEntry를 업데이트해야 합니다.\r\n        newEntry.id = response.data;\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });\r\n};\r\n\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\n/*const handleLike = (id) => {\r\n  // 좋아요 기능을 처리하는 함수\r\n  axios.post(`/api/diaries/${id}/like`)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaries(diaries.map(diary => diary.id === id ? { ...diary, isLiked: !diary.isLiked } : diary));\r\n      }\r\n    });\r\n};*/\r\n\r\n\r\nconst handleFriendClick = (friendId) => {\r\n  // 가상의 년도와 월을 사용하여 해당 친구의 달력 페이지로 이동\r\n  const year = '2024';\r\n  const month = '02';\r\n  navigate(`/friend-calendar/${friendId}/${year}-${month}`);\r\n};\r\n\r\nreturn (\r\n  <div>\r\n     <div className=\"button-container\">\r\n    <button onClick={() => setCalendarModalShown(!calendarModalShown)} className=\"button-select-year\">Select Year and Month</button>\r\n     </div>\r\n     {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n     )}\r\n     <div className=\"header-container\">\r\n    <h2>{selectedYearMonth}</h2> {/* 선택한 년도와 월 표시 */}\r\n    </div>\r\n    <FriendsList friends={friends} onFriendClick={handleFriendClick} />\r\n      <button onClick={handleOpenEmojiModal} className=\"button-add-emoji\">+</button>\r\n      <button onClick={handleOpenSettingPage} className=\"button-settings\">\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage} className=\"button-find-friends\">\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n\r\n      \r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n    //selectedImage={selectedImage} // 추가된 부분\r\n    //setSelectedImage={setSelectedImage} // 추가된 부분\r\n    isAdding={true}\r\n  />\r\n)}\r\n\r\n\r\n{diaryModalShown && (\r\n  <ViewDiaryModal\r\n    onClose={handleCloseDiaryModal}\r\n    selectedDiary={selectedDiary}\r\n    //selectedImage={selectedImage} // 추가된 부분\r\n  />\r\n)}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AACzC,OAAO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"},"metadata":{},"sourceType":"module","externalDependencies":[]}