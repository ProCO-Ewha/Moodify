{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\nimport ViewDiaryModal from './ViewDiaryModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  /*useEffect(() => {\r\n  axios.get('api/diaryEntries')\r\n  .then(response => setDiaryEntries(response.data));\r\n  }, []);*/\n\n  useEffect(() => {\n    if (selectedYearMonth) {\n      // 가짜 데이터\n      const fakeData = [{\n        date: '2024-01-01',\n        emoji: '😊',\n        text: 'Happy New Year!'\n      }, {\n        date: '2024-01-02',\n        emoji: '😍',\n        text: 'I love the start of the year.'\n      }, {\n        date: '2024-02-14',\n        emoji: '😊',\n        text: 'Happy Valentine\\'s Day!'\n      }];\n      setDiaryEntries(fakeData);\n    }\n  }, [selectedYearMonth]);\n  const handleAddDiary = (diaryText, selectedDate) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n\n    /*axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });*/\n\n    // 가상의 응답을 생성\n    setDiaryEntries([...diaryEntries, newEntry]);\n    setSelectedEmoji('');\n    setDiaryModalShown(false);\n  };\n  const handleEditDiary = (diaryText, selectedDate, index) => {\n    const editedEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n    axios.put(`api/diaryEntries/${index}`, editedEntry).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries[index] = editedEntry;\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleDeleteDiary = index => {\n    axios.delete(`api/diaryEntries/${index}`).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries.splice(index, 1);\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleYearMonthClick = () => {\n    setModalOpen(prevState => !prevState);\n  };\n  const handleSelect = date => {\n    setSelectedYearMonth(date);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleSelectDate = yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n  };\n  const handleOpenEmojiModal = () => {\n    setSelectedDiary(null); // 추가된 부분\n    setEmojiModalShown(!emojiModalShown);\n  };\n  const handleOpenAddDiaryModal = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setAddDiaryModalShown(true); // 추가된 부분\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)) // Add this line\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\n  const handleOpenDiaryModal = index => {\n    setIsAdding(false); // 추가된 부분\n    setSelectedDiary(sortedDiaryEntries[index]);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleYearMonthClick,\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleClose,\n      children: /*#__PURE__*/_jsxDEV(CalendarModal, {\n        onSelect: handleSelect,\n        onClose: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalendarModalShown(true),\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleOpenAddDiaryModal // 변경된 부분\n      ,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 3\n    }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(AddDiaryModal // 추가된 부분\n    , {\n      onAdd: handleAddDiary,\n      onClose: () => setAddDiaryModalShown(false),\n      selectedEmoji: selectedEmoji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 3\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(ViewDiaryModal // 변경된 부분\n    , {\n      onClose: handleCloseDiaryModal,\n      selectedDiary: selectedDiary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 3\n  }, this);\n};\n_s(HomeComponent, \"YHGterbjYQv/XairEdmF68yEqDg=\");\n_c = HomeComponent;\nexport default HomeComponent;\n\n// HomeComponent.js\n\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      <ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n*/\n\n/*import React, { useState, useEffect } from 'react';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState(\r\n    JSON.parse(localStorage.getItem('diaryEntries')) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\r\n  }, [diaryEntries]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      { date: selectedDate, emoji: selectedEmoji, text: diaryText }\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      /* 일기 목록 렌더링 */\n/*<ul>\r\n  {diaryEntries.map((entry, index) => (\r\n    <li key={index}>\r\n      {entry.date} - {entry.emoji} - {entry.text}\r\n    </li>\r\n  ))}\r\n</ul>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","AddDiaryModal","ViewDiaryModal","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","fakeData","date","emoji","text","handleAddDiary","diaryText","newEntry","handleEditDiary","index","editedEntry","put","then","response","status","newDiaryEntries","handleDeleteDiary","delete","splice","handleYearMonthClick","prevState","handleSelect","handleClose","handleSelectEmoji","handleSelectDate","yearMonth","handleOpenEmojiModal","handleOpenAddDiaryModal","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenDiaryModal","handleCloseDiaryModal","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onClose","onAdd","style","display","gridTemplateColumns","map","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\nuseEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate) => {\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nreturn (\r\n  <div>\r\n    <div onClick={handleYearMonthClick}>\r\n        {selectedYearMonth}\r\n      </div>\r\n      {isModalOpen && (\r\n        <div onClick={handleClose}>\r\n          <CalendarModal onSelect={handleSelect} onClose={handleClose} />\r\n        </div>\r\n      )}\r\n    <h2>{selectedYearMonth}</h2> {/* 선택한 년도와 월 표시 */}\r\n    <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n    <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n  <ViewDiaryModal // 변경된 부분\r\n    onClose={handleCloseDiaryModal}\r\n    selectedDiary={selectedDiary}\r\n  />\r\n)}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;\r\n\r\n\r\n\r\n\r\n// HomeComponent.js\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      <ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState(\r\n    JSON.parse(localStorage.getItem('diaryEntries')) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\r\n  }, [diaryEntries]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      { date: selectedDate, emoji: selectedEmoji, text: diaryText }\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      /* 일기 목록 렌더링 */\r\n      /*<ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;*/\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB,CAAC,CAAC;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACwB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC8B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACgC,QAAQ,EAAEC,WAAW,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkC,WAAW,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;;EAGnD;AACA;AACA;AACA;;EAEAC,SAAS,CAAC,MAAM;IACd,IAAIqB,iBAAiB,EAAE;MACrB;MACA,MAAMc,QAAQ,GAAG,CACf;QAAEC,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAkB,CAAC,EAC5D;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAgC,CAAC,EAC1E;QAAEF,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAE;MAA0B,CAAC,CACrE;MACDlB,eAAe,CAACe,QAAQ,CAAC;IAC3B;EACF,CAAC,EAAE,CAACd,iBAAiB,CAAC,CAAC;EAEvB,MAAMkB,cAAc,GAAGA,CAACC,SAAS,EAAEf,YAAY,KAAK;IAClD,MAAMgB,QAAQ,GAAG;MAAEL,IAAI,EAAEX,YAAY;MAAEY,KAAK,EAAEpB,aAAa;MAAEqB,IAAI,EAAEE;IAAU,CAAC;;IAE9E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEE;IACApB,eAAe,CAAC,CACd,GAAGD,YAAY,EACfsB,QAAQ,CACT,CAAC;IACFvB,gBAAgB,CAAC,EAAE,CAAC;IACpBF,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAM0B,eAAe,GAAGA,CAACF,SAAS,EAAEf,YAAY,EAAEkB,KAAK,KAAK;IAC5D,MAAMC,WAAW,GAAG;MAAER,IAAI,EAAEX,YAAY;MAAEY,KAAK,EAAEpB,aAAa;MAAEqB,IAAI,EAAEE;IAAU,CAAC;IACjFvC,KAAK,CAAC4C,GAAG,CAAE,oBAAmBF,KAAM,EAAC,EAAEC,WAAW,CAAC,CAClDE,IAAI,CAACC,QAAQ,IAAI;MAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC7B,MAAMC,eAAe,GAAG,CAAC,GAAG9B,YAAY,CAAC;QACzC8B,eAAe,CAACN,KAAK,CAAC,GAAGC,WAAW;QACpCxB,eAAe,CAAC6B,eAAe,CAAC;MAChC;IACA,CAAC,CAAC;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAIP,KAAK,IAAK;IACrC1C,KAAK,CAACkD,MAAM,CAAE,oBAAmBR,KAAM,EAAC,CAAC,CACxCG,IAAI,CAACC,QAAQ,IAAI;MAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC7B,MAAMC,eAAe,GAAG,CAAC,GAAG9B,YAAY,CAAC;QACzC8B,eAAe,CAACG,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC;QAChCvB,eAAe,CAAC6B,eAAe,CAAC;MAChC;IACA,CAAC,CAAC;EACF,CAAC;EAED,MAAMI,oBAAoB,GAAGA,CAAA,KAAM;IACjCnB,YAAY,CAACoB,SAAS,IAAI,CAACA,SAAS,CAAC;EACvC,CAAC;EAED,MAAMC,YAAY,GAAInB,IAAI,IAAK;IAC7Bd,oBAAoB,CAACc,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxBtB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAGD,MAAMuB,iBAAiB,GAAIpB,KAAK,IAAK;IACrCnB,gBAAgB,CAACmB,KAAK,CAAC;IACvBvB,kBAAkB,CAAC,KAAK,CAAC;IACzBE,kBAAkB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAM0C,gBAAgB,GAAIC,SAAS,IAAK;IACxCrC,oBAAoB,CAACqC,SAAS,CAAC;IAC/B/C,qBAAqB,CAAC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMgD,oBAAoB,GAAGA,CAAA,KAAM;IACjChC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IACxBd,kBAAkB,CAAC,CAACD,eAAe,CAAC;EACtC,CAAC;EAED,MAAMgD,uBAAuB,GAAIxB,KAAK,IAAK;IACzCnB,gBAAgB,CAACmB,KAAK,CAAC;IACvBvB,kBAAkB,CAAC,KAAK,CAAC;IACzBgB,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMgC,kBAAkB,GAAG3C,YAAY,CAClC4C,MAAM,CAACC,KAAK,IAAIA,KAAK,CAAC5B,IAAI,CAAC6B,UAAU,CAAC5C,iBAAiB,CAAC,CAAC,CAAE;EAAA,CAC3D6C,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACF,CAAC,CAAC/B,IAAI,CAAC,GAAG,IAAIiC,IAAI,CAACD,CAAC,CAAChC,IAAI,CAAC,CAAC;EAEpD,MAAMkC,oBAAoB,GAAI3B,KAAK,IAAK;IACtCX,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACpBJ,gBAAgB,CAACkC,kBAAkB,CAACnB,KAAK,CAAC,CAAC;IAC3C3B,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAEL,MAAMuD,qBAAqB,GAAGA,CAAA,KAAM;IAClC/C,qBAAqB,CAAC,IAAI,CAAC;IAC3BR,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACER,OAAA;IAAAgE,QAAA,gBACEhE,OAAA;MAAKiE,OAAO,EAAEpB,oBAAqB;MAAAmB,QAAA,EAC9BnD;IAAiB;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC,EACL5C,WAAW,iBACVzB,OAAA;MAAKiE,OAAO,EAAEjB,WAAY;MAAAgB,QAAA,eACxBhE,OAAA,CAACN,aAAa;QAAC4E,QAAQ,EAAEvB,YAAa;QAACwB,OAAO,EAAEvB;MAAY;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CACN,eACHrE,OAAA;MAAAgE,QAAA,EAAKnD;IAAiB;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,KAAC,eAC7BrE,OAAA;MAAQiE,OAAO,EAAEA,CAAA,KAAM7D,qBAAqB,CAAC,IAAI,CAAE;MAAA4D,QAAA,EAAC;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAClFrE,OAAA;MAAQiE,OAAO,EAAEb,oBAAqB;MAAAY,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGlDlE,kBAAkB,iBACjBH,OAAA,CAACN,aAAa;MACZ4E,QAAQ,EAAEpB,gBAAiB;MAC3BqB,OAAO,EAAEA,CAAA,KAAMnE,qBAAqB,CAAC,KAAK;IAAE;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CACF,EAEFhE,eAAe,iBACdL,OAAA,CAACL,UAAU;MACT2E,QAAQ,EAAEjB,uBAAwB,CAAC;MAAA;MACnCkB,OAAO,EAAEA,CAAA,KAAMjE,kBAAkB,CAAC,KAAK;IAAE;MAAA4D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CACF,EAEAhD,kBAAkB,iBACjBrB,OAAA,CAACH,aAAa,CAAC;IAAA;MACb2E,KAAK,EAAEzC,cAAe;MACtBwC,OAAO,EAAEA,CAAA,KAAMjD,qBAAqB,CAAC,KAAK,CAAE;MAC5Cb,aAAa,EAAEA;IAAc;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CACF,EAEA9D,eAAe,iBACdP,OAAA,CAACF,cAAc,CAAC;IAAA;MACdyE,OAAO,EAAER,qBAAsB;MAC/B5C,aAAa,EAAEA;IAAc;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CACF,eAEDrE,OAAA;MAAKyE,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,mBAAmB,EAAE;MAAiB,CAAE;MAAAX,QAAA,EACpEV,kBAAkB,CAACsB,GAAG,CAAC,CAACpB,KAAK,EAAErB,KAAK,kBACnCnC,OAAA;QAAiBiE,OAAO,EAAEA,CAAA,KAAMH,oBAAoB,CAAC3B,KAAK,CAAE;QAAA6B,QAAA,EACzDR,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE3B;MAAK,GADLM,KAAK;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEN,CAAC;AAACnE,EAAA,CAtLID,aAAa;AAAA4E,EAAA,GAAb5E,aAAa;AAwLnB,eAAeA,aAAa},"metadata":{},"sourceType":"module","externalDependencies":[]}