{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\nimport ViewDiaryModal from './ViewDiaryModal';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  /*useEffect(() => {\r\n  axios.get('api/diaryEntries')\r\n  .then(response => setDiaryEntries(response.data));\r\n  }, []);*/\n\n  useEffect(() => {\n    if (selectedYearMonth) {\n      // 가짜 데이터\n      const fakeData = [{\n        date: '2024-01-01',\n        emoji: '😊',\n        text: 'Happy New Year!'\n      }, {\n        date: '2024-01-02',\n        emoji: '😍',\n        text: 'I love the start of the year.'\n      }, {\n        date: '2024-02-14',\n        emoji: '😊',\n        text: 'Happy Valentine\\'s Day!'\n      }];\n      setDiaryEntries(fakeData);\n    }\n  }, [selectedYearMonth]);\n  const handleAddDiary = (diaryText, selectedDate) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n\n    /*axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });*/\n\n    // 가상의 응답을 생성\n    setDiaryEntries([...diaryEntries, newEntry]);\n    setSelectedEmoji('');\n    setDiaryModalShown(false);\n  };\n  const handleEditDiary = (diaryText, selectedDate, index) => {\n    const editedEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n    axios.put(`api/diaryEntries/${index}`, editedEntry).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries[index] = editedEntry;\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleDeleteDiary = index => {\n    axios.delete(`api/diaryEntries/${index}`).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries.splice(index, 1);\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleYearMonthClick = () => {\n    setModalOpen(prevState => !prevState);\n  };\n  const handleSelect = date => {\n    setSelectedYearMonth(date);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleSelectDate = yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n  };\n  const handleOpenEmojiModal = () => {\n    setSelectedDiary(null); // 추가된 부분\n    setEmojiModalShown(!emojiModalShown);\n  };\n  const handleOpenAddDiaryModal = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setAddDiaryModalShown(true); // 추가된 부분\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)) // Add this line\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\n  const handleOpenDiaryModal = index => {\n    setIsAdding(false); // 추가된 부분\n    setSelectedDiary(sortedDiaryEntries[index]);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  const handleOpenSettingPage = () => {\n    navigate('/Setting'); // Setting.js로 이동\n  };\n  const handeOpenFindfriendsPage = () => {\n    navigate('/Findfriends');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalendarModalShown(true),\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenSettingPage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/setting.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenFindfriendsPage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/user.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleOpenAddDiaryModal // 변경된 부분\n      ,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 3\n    }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(AddDiaryModal // 추가된 부분\n    , {\n      onAdd: handleAddDiary,\n      onClose: () => setAddDiaryModalShown(false),\n      selectedEmoji: selectedEmoji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 3\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(ViewDiaryModal // 변경된 부분\n    , {\n      onClose: handleCloseDiaryModal,\n      selectedDiary: selectedDiary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 3\n  }, this);\n};\n_s(HomeComponent, \"gff+UQKHh8CKGKOUg33oyeWWPb8=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeComponent;\nexport default HomeComponent;\n\n// HomeComponent.js\n\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      <ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n*/\n\n/*import React, { useState, useEffect } from 'react';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState(\r\n    JSON.parse(localStorage.getItem('diaryEntries')) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\r\n  }, [diaryEntries]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      { date: selectedDate, emoji: selectedEmoji, text: diaryText }\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      /* 일기 목록 렌더링 */\n/*<ul>\r\n  {diaryEntries.map((entry, index) => (\r\n    <li key={index}>\r\n      {entry.date} - {entry.emoji} - {entry.text}\r\n    </li>\r\n  ))}\r\n</ul>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","AddDiaryModal","ViewDiaryModal","useNavigate","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","navigate","fakeData","date","emoji","text","handleAddDiary","diaryText","newEntry","handleEditDiary","index","editedEntry","put","then","response","status","newDiaryEntries","handleDeleteDiary","delete","splice","handleYearMonthClick","prevState","handleSelect","handleClose","handleSelectEmoji","handleSelectDate","yearMonth","handleOpenEmojiModal","handleOpenAddDiaryModal","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenDiaryModal","handleCloseDiaryModal","handleOpenSettingPage","handeOpenFindfriendsPage","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","handleOpenFindfriendsPage","onSelect","onClose","onAdd","style","display","gridTemplateColumns","map","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\nuseEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate) => {\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handeOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nreturn (\r\n  <div>\r\n      <h2>{selectedYearMonth}</h2> {/* 선택한 년도와 월 표시 */}\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n  <ViewDiaryModal // 변경된 부분\r\n    onClose={handleCloseDiaryModal}\r\n    selectedDiary={selectedDiary}\r\n  />\r\n)}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;\r\n\r\n\r\n\r\n\r\n// HomeComponent.js\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      <ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState(\r\n    JSON.parse(localStorage.getItem('diaryEntries')) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\r\n  }, [diaryEntries]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      { date: selectedDate, emoji: selectedEmoji, text: diaryText }\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      /* 일기 목록 렌더링 */\r\n      /*<ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}