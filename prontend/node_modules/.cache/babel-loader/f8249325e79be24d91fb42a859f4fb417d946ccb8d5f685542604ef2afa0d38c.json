{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\n\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\n\n// 가상의 응답을 생성\n/*setDiaryEntries([\r\n  ...diaryEntries,\r\n  newEntry\r\n]);\r\nsetSelectedEmoji('');\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleYearMonthClick = () => {\r\nsetModalOpen(prevState => !prevState);\r\n};\r\nconst handleSelect = (date) => {\r\nsetSelectedYearMonth(date);\r\n};\r\nconst handleClose = () => {\r\nsetModalOpen(false);\r\n};\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\nconst handleOpenEmojiModal = () => {\r\nsetSelectedDiary(null); // 추가된 부분\r\nsetEmojiModalShown(!emojiModalShown);\r\n};\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetAddDiaryModalShown(true); // 추가된 부분\r\n};\r\nconst sortedDiaryEntries = diaryEntries\r\n  .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    const handleOpenDiaryModal = (index) => {\r\n    setIsAdding(false); // 추가된 부분\r\n    setSelectedDiary(sortedDiaryEntries[index]);\r\n    setDiaryModalShown(true);\r\n  };\r\nconst handleCloseDiaryModal = () => {\r\nsetSelectedDiaryIndex(null);\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleOpenSettingPage = () => {\r\nnavigate('/Setting'); // Setting.js로 이동\r\n};\r\nconst handleOpenFindfriendsPage = () =>{\r\nnavigate('/Findfriends');\r\n}\r\nreturn (\r\n<div>\r\n    <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\n/*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n<button onClick={handleOpenEmojiModal}>+</button>\r\n<button onClick={handleOpenSettingPage}>\r\n  <img src=\"/images/setting.png\"/>\r\n</button>\r\n<button onClick={handleOpenFindfriendsPage}>\r\n  <img src=\"/images/user.png\"/>\r\n</button>\r\n\r\n{calendarModalShown && (\r\n<CalendarModal\r\nonSelect={handleSelectDate}\r\nonClose={() => setCalendarModalShown(false)}\r\n/>\r\n)}\r\n{emojiModalShown && (\r\n<EmojiModal\r\nonSelect={handleOpenAddDiaryModal} // 변경된 부분\r\nonClose={() => setEmojiModalShown(false)}\r\n/>\r\n)}\r\n{addDiaryModalShown && (\r\n<AddDiaryModal // 추가된 부분\r\nonAdd={handleAddDiary}\r\nonClose={() => setAddDiaryModalShown(false)}\r\nselectedEmoji={selectedEmoji}\r\n/>\r\n)}\r\n{diaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={handleCloseDiaryModal}\r\n    selectedEmoji={selectedEmoji}\r\n    selectedImage={selectedImage} // New\r\n    setSelectedImage={setSelectedImage} // New\r\n  />\r\n)}\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n{sortedDiaryEntries.map((entry, index) => (\r\n<div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n{entry?.emoji}\r\n</div>\r\n))}\r\n</div>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\n\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\n//import AddDiaryModal from './AddDiaryModal'; // 추가된 부분\nimport ViewDiaryModal from './ViewDiaryModal';\nimport FriendsList from './FriendsList'; // 추가된 부분\nimport FriendDiaryList from './FriendDiaryList';\nimport FriendCalendarPage from './FriendCalendarPage';\nimport { useNavigate } from 'react-router-dom';\nimport './HomeComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  //const [selectedImage, setSelectedImage] = useState(null);\n  //const [friends, setFriends] = useState([]); // 친구 목록을 저장하는 상태\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [diaries, setDiaries] = useState([]);\n  const navigate = useNavigate();\n  const [friends, setFriends] = useState([{\n    id: 1,\n    nickname: 'friend1'\n  }, {\n    id: 2,\n    nickname: 'friend2'\n  }, {\n    id: 3,\n    nickname: 'friend1'\n  }, {\n    id: 4,\n    nickname: 'friend2'\n  }, {\n    id: 5,\n    nickname: 'friend1'\n  }, {\n    id: 6,\n    nickname: 'friend2'\n  }, {\n    id: 7,\n    nickname: 'friend1'\n  }, {\n    id: 8,\n    nickname: 'friend2'\n  }, {\n    id: 9,\n    nickname: 'friend1'\n  }, {\n    id: 10,\n    nickname: 'friend2'\n  }\n  // ...\n  ]);\n\n  /*useEffect(() => {\r\n  axios.get('api/diaryEntries')\r\n  .then(response => setDiaryEntries(response.data));\r\n  }, []);*/\n\n  useEffect(() => {\n    if (selectedYearMonth) {\n      // 가짜 데이터\n      const fakeData = [{\n        date: '2024-01-02',\n        emoji: '😍',\n        text: 'I love the start of the year.'\n      }, {\n        date: '2024-01-01',\n        emoji: '😊',\n        text: 'Happy New Year!'\n      }, {\n        date: '2024-02-14',\n        emoji: '😊',\n        text: 'Happy Valentine\\'s Day!'\n      }];\n      setDiaryEntries(fakeData);\n    }\n  }, [selectedYearMonth]);\n\n  /*useEffect(() => {\r\n    // 친구 목록을 가지고 오는 API 호출\r\n    axios.get('/api/friends')\r\n      .then(response => setFriends(response.data));\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    // 선택한 친구의 일기 목록을 가지고 오는 API 호출\r\n    if (selectedFriendId) {\r\n      axios.get(`/api/diaries/${selectedFriendId}`)\r\n        .then(response => setDiaries(response.data));\r\n    }\r\n  }, [selectedFriendId]);*/\n\n  const handleAddDiary = (diaryText, selectedDate) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n\n    /*axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });*/\n\n    // 가상의 응답을 생성\n    setDiaryEntries([...diaryEntries, newEntry]);\n    setSelectedEmoji('');\n    setDiaryModalShown(false);\n    setSelectedYearMonth(selectedDate.slice(0, 7));\n    //setSelectedImage(null);\n  };\n\n  /*const handleEditDiary = (diaryText, selectedDate, index) => {\r\n  const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n  axios.put(`api/diaryEntries/${index}`, editedEntry)\r\n  .then(response => {\r\n  if (response.status === 200) {\r\n  const newDiaryEntries = [...diaryEntries];\r\n  newDiaryEntries[index] = editedEntry;\r\n  setDiaryEntries(newDiaryEntries);\r\n  }\r\n  });\r\n  };*/\n\n  /*const handleDeleteDiary = (index) => {\r\n  axios.delete(`api/diaryEntries/${index}`)\r\n  .then(response => {\r\n  if (response.status === 200) {\r\n  const newDiaryEntries = [...diaryEntries];\r\n  newDiaryEntries.splice(index, 1);\r\n  setDiaryEntries(newDiaryEntries);\r\n  }\r\n  });\r\n  };*/\n\n  const handleYearMonthClick = () => {\n    setModalOpen(prevState => !prevState);\n  };\n  const handleSelect = date => {\n    setSelectedYearMonth(date);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleSelectDate = async yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n    const handleOpenEmojiModal = () => {\n      setSelectedDiary(null); // 추가된 부분\n      setEmojiModalShown(!emojiModalShown);\n    };\n    const handleOpenAddDiaryModal = emoji => {\n      setSelectedEmoji(emoji);\n      setEmojiModalShown(false);\n      setAddDiaryModalShown(true); // 추가된 부분\n    };\n    const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)) // Add this line\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\n    const handleOpenDiaryModal = index => {\n      setIsAdding(false); // 추가된 부분\n      setSelectedDiary(sortedDiaryEntries[index]);\n      setDiaryModalShown(true);\n    };\n    const handleCloseDiaryModal = () => {\n      setSelectedDiaryIndex(null);\n      setDiaryModalShown(false);\n    };\n    const handleOpenSettingPage = () => {\n      navigate('/Setting'); // Setting.js로 이동\n    };\n    const handleOpenFindfriendsPage = () => {\n      navigate('/Findfriends');\n    };\n    const handleLike = id => {\n      // 좋아요 기능을 처리하는 함수\n      // 백엔드 서버에 좋아요 상태를 변경하는 요청을 보내야 합니다.\n      // 이 예제에서는 가상의 기능을 구현하기 위해 상태만 변경합니다.\n      setDiaries(diaries.map(diary => diary.id === id ? {\n        ...diary,\n        isLiked: !diary.isLiked\n      } : diary));\n    };\n    const handleFriendClick = friendId => {\n      setSelectedFriendId(friendId);\n      navigate(`/calendar/${friendId}`); // 친구의 달력 페이지로 이동\n    };\n    if (selectedFriendId) {\n      const response = await axios.get(`/api/diaries/${selectedFriendId}/${yearMonth}`);\n      setDiaries(response.data);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"hi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCalendarModalShown(!calendarModalShown),\n          className: \"button-select-year\",\n          children: \"Select Year and Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 6\n      }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n        onSelect: handleSelectDate,\n        onClose: () => setCalendarModalShown(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedYearMonth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 5\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(FriendsList, {\n        friends: friends,\n        onSelect: setSelectedFriendId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FriendsList, {\n        friends: friends,\n        onSelect: handleFriendClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 5\n      }, this), selectedFriendId && /*#__PURE__*/_jsxDEV(FriendDiaryList, {\n        diaries: diaries,\n        onLike: handleLike\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpenEmojiModal,\n        className: \"button-add-emoji\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpenSettingPage,\n        className: \"button-settings\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/setting.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpenFindfriendsPage,\n        className: \"button-find-friends\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/user.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 7\n      }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n        onSelect: handleOpenAddDiaryModal // 변경된 부분\n        ,\n        onClose: () => setEmojiModalShown(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 3\n      }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(DiaryModal, {\n        onAdd: handleAddDiary,\n        onClose: () => setAddDiaryModalShown(false),\n        selectedEmoji: selectedEmoji\n        //selectedImage={selectedImage} // 추가된 부분\n        //setSelectedImage={setSelectedImage} // 추가된 부분\n        ,\n        isAdding: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 3\n      }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(ViewDiaryModal, {\n        onClose: handleCloseDiaryModal,\n        selectedDiary: selectedDiary\n        //selectedImage={selectedImage} // 추가된 부분\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(5, 1fr)'\n        },\n        children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleOpenDiaryModal(index),\n          children: entry === null || entry === void 0 ? void 0 : entry.emoji\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 3\n    }, this);\n  };\n};\n_s(HomeComponent, \"xpgRLo9TVge3ymMcmJNI0EDwEBs=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeComponent;\nexport default HomeComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","ViewDiaryModal","FriendsList","FriendDiaryList","FriendCalendarPage","useNavigate","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","selectedFriendId","setSelectedFriendId","diaries","setDiaries","navigate","friends","setFriends","id","nickname","fakeData","date","emoji","text","handleAddDiary","diaryText","newEntry","slice","handleYearMonthClick","prevState","handleSelect","handleClose","handleSelectEmoji","handleSelectDate","yearMonth","handleOpenEmojiModal","handleOpenAddDiaryModal","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenDiaryModal","index","handleCloseDiaryModal","handleOpenSettingPage","handleOpenFindfriendsPage","handleLike","map","diary","isLiked","handleFriendClick","friendId","response","get","data","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","onSelect","onClose","onLike","src","onAdd","style","display","gridTemplateColumns","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  /*setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nreturn (\r\n  <div>\r\n      <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\r\n      /*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedImage={selectedImage} // New\r\n          setSelectedImage={setSelectedImage} // New\r\n        />\r\n      )}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\nexport default HomeComponent;*/\r\n\r\n// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n//import AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport FriendsList from './FriendsList'; // 추가된 부분\r\nimport FriendDiaryList from './FriendDiaryList';\r\nimport FriendCalendarPage from './FriendCalendarPage';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './HomeComponent.css'\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\n//const [selectedImage, setSelectedImage] = useState(null);\r\n//const [friends, setFriends] = useState([]); // 친구 목록을 저장하는 상태\r\nconst [selectedFriendId, setSelectedFriendId] = useState(null); \r\nconst [diaries, setDiaries] = useState([]);\r\nconst navigate = useNavigate();\r\nconst [friends, setFriends] = useState([\r\n  { id: 1, nickname: 'friend1' },\r\n  { id: 2, nickname: 'friend2' },\r\n  { id: 3, nickname: 'friend1' },\r\n  { id: 4, nickname: 'friend2' },\r\n  { id: 5, nickname: 'friend1' },\r\n  { id: 6, nickname: 'friend2' },\r\n  { id: 7, nickname: 'friend1' },\r\n  { id: 8, nickname: 'friend2' },\r\n  { id: 9, nickname: 'friend1' },\r\n  { id: 10, nickname: 'friend2' },\r\n  // ...\r\n]);\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\nuseEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\n/*useEffect(() => {\r\n  // 친구 목록을 가지고 오는 API 호출\r\n  axios.get('/api/friends')\r\n    .then(response => setFriends(response.data));\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  // 선택한 친구의 일기 목록을 가지고 오는 API 호출\r\n  if (selectedFriendId) {\r\n    axios.get(`/api/diaries/${selectedFriendId}`)\r\n      .then(response => setDiaries(response.data));\r\n  }\r\n}, [selectedFriendId]);*/\r\n\r\nconst handleAddDiary = (diaryText, selectedDate) => {\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedYearMonth(selectedDate.slice(0, 7));\r\n  //setSelectedImage(null);\r\n};\r\n\r\n/*const handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};*/\r\n\r\n/*const handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};*/\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = async (yearMonth) => {\r\n  setSelectedYearMonth(yearMonth);\r\n  setCalendarModalShown(false);\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nconst handleLike = (id) => {\r\n  // 좋아요 기능을 처리하는 함수\r\n  // 백엔드 서버에 좋아요 상태를 변경하는 요청을 보내야 합니다.\r\n  // 이 예제에서는 가상의 기능을 구현하기 위해 상태만 변경합니다.\r\n  setDiaries(diaries.map(diary => diary.id === id ? { ...diary, isLiked: !diary.isLiked } : diary));\r\n};\r\n\r\nconst handleFriendClick = (friendId) => {\r\n  setSelectedFriendId(friendId);\r\n  navigate(`/calendar/${friendId}`); // 친구의 달력 페이지로 이동\r\n};\r\n\r\n\r\n  if (selectedFriendId) {\r\n    const response = await axios.get(`/api/diaries/${selectedFriendId}/${yearMonth}`);\r\n    setDiaries(response.data);\r\n  }\r\n\r\nreturn (\r\n  <div>\r\n    <div>hi</div>\r\n     <div className=\"button-container\">\r\n    <button onClick={() => setCalendarModalShown(!calendarModalShown)} className=\"button-select-year\">Select Year and Month</button>\r\n     </div>\r\n     {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n     )}\r\n     <div className=\"header-container\">\r\n    <h2>{selectedYearMonth}</h2> {/* 선택한 년도와 월 표시 */}\r\n    </div>\r\n    <FriendsList friends={friends} onSelect={setSelectedFriendId} />\r\n    <FriendsList friends={friends} onSelect={handleFriendClick} />\r\n      {selectedFriendId && <FriendDiaryList diaries={diaries} onLike={handleLike} />}\r\n      <button onClick={handleOpenEmojiModal} className=\"button-add-emoji\">+</button>\r\n      <button onClick={handleOpenSettingPage} className=\"button-settings\">\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage} className=\"button-find-friends\">\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n\r\n      \r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n    //selectedImage={selectedImage} // 추가된 부분\r\n    //setSelectedImage={setSelectedImage} // 추가된 부분\r\n    isAdding={true}\r\n  />\r\n)}\r\n\r\n\r\n{diaryModalShown && (\r\n  <ViewDiaryModal\r\n    onClose={handleCloseDiaryModal}\r\n    selectedDiary={selectedDiary}\r\n    //selectedImage={selectedImage} // 추가된 부분\r\n  />\r\n)}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\n}\r\nexport default HomeComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC;AACA,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AACzC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}