{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\CalendarModal.js\",\n  _s = $RefreshSig$();\n/*import React, { useState } from 'react';\r\n\r\nconst CalendarModal = ({ onClose, onYearMonthSelect }) => {\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n\r\n  const handleSelectYearMonth = () => {\r\n    if (selectedYear && selectedMonth) {\r\n      onYearMonthSelect(selectedYear, selectedMonth);\r\n      onClose();\r\n    } else {\r\n      alert('Please select both year and month.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Select Year and Month</h3>\r\n      <label>Year:</label>\r\n      <input type=\"text\" value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)} />\r\n      <label>Month:</label>\r\n      <input type=\"text\" value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)} />\r\n      <button onClick={handleSelectYearMonth}>Select</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarModal;*/\n\n/*import React, { useState, useEffect } from 'react';\r\n\r\nconst CalendarModal = ({ onClose, onYearMonthSelect }) => {\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [yearList, setYearList] = useState([]);\r\n  const [monthList, setMonthList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // 년도 목록 생성 (예: 2020부터 2030까지)\r\n  const startYear = 2020;\r\n  const years = Array.from({ length: 11 }, (_, index) => startYear + index);\r\n  setYearList(years);\r\n\r\n\r\n    // 달 목록 생성 (1부터 12까지)\r\n    const months = Array.from({ length: 12 }, (_, index) => index + 1);\r\n    setMonthList(months);\r\n  }, []);\r\n\r\n  const handleSelectYearMonth = () => {\r\n    if (selectedYear && selectedMonth) {\r\n      onYearMonthSelect(selectedYear, selectedMonth);\r\n      onClose();\r\n    } else {\r\n      alert('Please select both year and month.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Select Year and Month</h3>\r\n      <label>Year:</label>\r\n      <select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>\r\n        <option value=\"\">Select Year</option>\r\n        {yearList.map((year) => (\r\n          <option key={year} value={year}>\r\n            {year}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <label>Month:</label>\r\n      <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)}>\r\n        <option value=\"\">Select Month</option>\r\n        {monthList.map((month) => (\r\n          <option key={month} value={month}>\r\n            {month}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={handleSelectYearMonth}>Select</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarModal;*/\nimport React, { useState, useEffect } from 'react';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\n  const [entries, setEntries] = useState(JSON.parse(localStorage.getItem('emojiCalendar')) || {});\n  const handleEmojiSelect = emoji => {\n    setSelectedEmoji(emoji);\n  };\n  const handleDiarySave = (selectedDate, diaryEntry) => {\n    const newEntries = {\n      ...entries,\n      [selectedDate]: {\n        emoji: selectedEmoji,\n        diary: diaryEntry\n      }\n    };\n    setEntries(newEntries);\n    localStorage.setItem('emojiCalendar', JSON.stringify(newEntries));\n    setSelectedEmoji(null);\n  };\n  useEffect(() => {\n    // 로컬 스토리지에 저장된 데이터를 불러오는 로직\n    const storedData = JSON.parse(localStorage.getItem('emojiCalendar')) || {};\n    setEntries(storedData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAC10\\uC815 \\uC774\\uBAA8\\uD2F0\\uCF58 \\uB2EC\\uB825\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), selectedEmoji ? /*#__PURE__*/_jsxDEV(DiaryModal, {\n      onDiarySave: handleDiarySave,\n      selectedEmoji: selectedEmoji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onEmojiSelect: handleEmojiSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.entries(entries).map(([date, {\n        emoji,\n        diary\n      }]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: emoji\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: diary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"80vYPhXsIyPuT+aMOBkbfHjvs0E=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","EmojiModal","DiaryModal","jsxDEV","_jsxDEV","Calendar","_s","selectedEmoji","setSelectedEmoji","entries","setEntries","JSON","parse","localStorage","getItem","handleEmojiSelect","emoji","handleDiarySave","selectedDate","diaryEntry","newEntries","diary","setItem","stringify","storedData","children","fileName","_jsxFileName","lineNumber","columnNumber","onDiarySave","onEmojiSelect","Object","map","date","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/CalendarModal.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\n\r\nconst CalendarModal = ({ onClose, onYearMonthSelect }) => {\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n\r\n  const handleSelectYearMonth = () => {\r\n    if (selectedYear && selectedMonth) {\r\n      onYearMonthSelect(selectedYear, selectedMonth);\r\n      onClose();\r\n    } else {\r\n      alert('Please select both year and month.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Select Year and Month</h3>\r\n      <label>Year:</label>\r\n      <input type=\"text\" value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)} />\r\n      <label>Month:</label>\r\n      <input type=\"text\" value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)} />\r\n      <button onClick={handleSelectYearMonth}>Select</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarModal;*/\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\n\r\nconst CalendarModal = ({ onClose, onYearMonthSelect }) => {\r\n  const [selectedYear, setSelectedYear] = useState('');\r\n  const [selectedMonth, setSelectedMonth] = useState('');\r\n  const [yearList, setYearList] = useState([]);\r\n  const [monthList, setMonthList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // 년도 목록 생성 (예: 2020부터 2030까지)\r\n  const startYear = 2020;\r\n  const years = Array.from({ length: 11 }, (_, index) => startYear + index);\r\n  setYearList(years);\r\n\r\n\r\n    // 달 목록 생성 (1부터 12까지)\r\n    const months = Array.from({ length: 12 }, (_, index) => index + 1);\r\n    setMonthList(months);\r\n  }, []);\r\n\r\n  const handleSelectYearMonth = () => {\r\n    if (selectedYear && selectedMonth) {\r\n      onYearMonthSelect(selectedYear, selectedMonth);\r\n      onClose();\r\n    } else {\r\n      alert('Please select both year and month.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Select Year and Month</h3>\r\n      <label>Year:</label>\r\n      <select value={selectedYear} onChange={(e) => setSelectedYear(e.target.value)}>\r\n        <option value=\"\">Select Year</option>\r\n        {yearList.map((year) => (\r\n          <option key={year} value={year}>\r\n            {year}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <label>Month:</label>\r\n      <select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)}>\r\n        <option value=\"\">Select Month</option>\r\n        {monthList.map((month) => (\r\n          <option key={month} value={month}>\r\n            {month}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button onClick={handleSelectYearMonth}>Select</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarModal;*/\r\nimport React, { useState, useEffect } from 'react';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst Calendar = () => {\r\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\r\n  const [entries, setEntries] = useState(\r\n    JSON.parse(localStorage.getItem('emojiCalendar')) || {}\r\n  );\r\n\r\n  const handleEmojiSelect = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n  };\r\n\r\n  const handleDiarySave = (selectedDate, diaryEntry) => {\r\n    const newEntries = {\r\n      ...entries,\r\n      [selectedDate]: { emoji: selectedEmoji, diary: diaryEntry }\r\n    };\r\n    setEntries(newEntries);\r\n    localStorage.setItem('emojiCalendar', JSON.stringify(newEntries));\r\n    setSelectedEmoji(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 로컬 스토리지에 저장된 데이터를 불러오는 로직\r\n    const storedData = JSON.parse(localStorage.getItem('emojiCalendar')) || {};\r\n    setEntries(storedData);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>감정 이모티콘 달력</h2>\r\n      {/* 이모티콘이 선택되었을 경우 일기 작성 모달 표시, 그렇지 않을 경우 이모티콘 선택 모달 표시 */}\r\n      {selectedEmoji ? (\r\n        <DiaryModal onDiarySave={handleDiarySave} selectedEmoji={selectedEmoji} />\r\n      ) : (\r\n        <EmojiModal onEmojiSelect={handleEmojiSelect} />\r\n      )}\r\n      {/* 달력 표시 */}\r\n      <div>\r\n        {Object.entries(entries).map(([date, { emoji, diary }]) => (\r\n          <div key={date}>\r\n            <h3>{date}</h3>\r\n            <p>{emoji}</p>\r\n            <p>{diary}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}