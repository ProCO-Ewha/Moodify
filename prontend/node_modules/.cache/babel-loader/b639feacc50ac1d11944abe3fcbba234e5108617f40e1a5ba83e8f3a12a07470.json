{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  var _diaryEntries$selecte;\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n\n  /*useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);*/\n\n  useEffect(() => {\n    if (selectedYearMonth) {\n      // 가짜 데이터\n      const fakeData = [{\n        date: '2024-01-01',\n        emoji: '😊',\n        text: 'Happy New Year!'\n      }, {\n        date: '2024-01-02',\n        emoji: '😍',\n        text: 'I love the start of the year.'\n      }, {\n        date: '2024-02-14',\n        emoji: '😊',\n        text: 'Happy Valentine\\'s Day!'\n      }];\n      setDiaryEntries(fakeData);\n    }\n  }, [selectedYearMonth]);\n  const handleAddDiary = (diaryText, selectedDate) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n    /*axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n    };*/\n\n    // 가상의 응답을 생성\n    setDiaryEntries([...diaryEntries, newEntry]);\n    setSelectedEmoji('');\n    setDiaryModalShown(false);\n  };\n  const handleEditDiary = (diaryText, selectedDate, index) => {\n    const editedEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n    axios.put(`/api/diaryEntries/${index}`, editedEntry).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries[index] = editedEntry;\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const handleDeleteDiary = index => {\n    axios.delete(`/api/diaryEntries/${index}`).then(response => {\n      if (response.status === 200) {\n        const newDiaryEntries = [...diaryEntries];\n        newDiaryEntries.splice(index, 1);\n        setDiaryEntries(newDiaryEntries);\n      }\n    });\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)).sort((a, b) => new Date(a.date) - new Date(b.date));\n  const handleOpenEmojiModal = () => {\n    setEmojiModalShown(true);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setCalendarModalShown(true); // 날짜 선택 모달을 엽니다.\n  };\n  const handleSelectEmojiDate = yearMonth => {\n    // 이 함수는 날짜를 선택하고 일기 작성 모달을 엽니다.\n    setSelectedDate(yearMonth);\n    setCalendarModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleOpenDiaryModal = index => {\n    setSelectedDiaryIndex(index);\n    setSelectedDate(sortedDiaryEntries[index].date);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalendarModalShown(true),\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectEmojiDate // 날짜 선택 후 일기 작성 모달을 엽니다.\n      ,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleSelectEmoji,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(DiaryModal, {\n      onAdd: handleAddDiary,\n      onEdit: handleEditDiary,\n      onDelete: handleDeleteDiary,\n      onClose: handleCloseDiaryModal,\n      selectedEmoji: selectedEmoji,\n      selectedDate: selectedDate // 선택된 날짜를 전달합니다.\n      ,\n      selectedText: (_diaryEntries$selecte = diaryEntries[selectedDiaryIndex]) === null || _diaryEntries$selecte === void 0 ? void 0 : _diaryEntries$selecte.text,\n      selectedIndex: selectedDiaryIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => entry && handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeComponent, \"24KT6RlNQNU/q8Uhs+QB4A5OwzA=\");\n_c = HomeComponent;\nexport default HomeComponent;\n\n// HomeComponent.js\n\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      <ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n*/\n\n/*import React, { useState, useEffect } from 'react';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState(\r\n    JSON.parse(localStorage.getItem('diaryEntries')) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\r\n  }, [diaryEntries]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      { date: selectedDate, emoji: selectedEmoji, text: diaryText }\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      /* 일기 목록 렌더링 */\n/*<ul>\r\n  {diaryEntries.map((entry, index) => (\r\n    <li key={index}>\r\n      {entry.date} - {entry.emoji} - {entry.text}\r\n    </li>\r\n  ))}\r\n</ul>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","jsxDEV","_jsxDEV","HomeComponent","_s","_diaryEntries$selecte","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","fakeData","date","emoji","text","handleAddDiary","diaryText","newEntry","handleEditDiary","index","editedEntry","put","then","response","status","newDiaryEntries","handleDeleteDiary","delete","splice","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenEmojiModal","handleSelectEmoji","handleSelectEmojiDate","yearMonth","handleOpenDiaryModal","handleCloseDiaryModal","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onClose","onAdd","onEdit","onDelete","selectedText","selectedIndex","style","display","gridTemplateColumns","map","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\r\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n\r\n\r\n  /*useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);*/\r\n\r\n  useEffect(() => {\r\n    if (selectedYearMonth) {\r\n      // 가짜 데이터\r\n      const fakeData = [\r\n        { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n        { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n        { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n      ];\r\n      setDiaryEntries(fakeData);\r\n    }\r\n  }, [selectedYearMonth]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    /*axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };*/\r\n\r\n  // 가상의 응답을 생성\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(true);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setCalendarModalShown(true);  // 날짜 선택 모달을 엽니다.\r\n  };\r\n\r\n  const handleSelectEmojiDate = (yearMonth) => {  // 이 함수는 날짜를 선택하고 일기 작성 모달을 엽니다.\r\n    setSelectedDate(yearMonth);\r\n    setCalendarModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleOpenDiaryModal = (index) => {\r\n    setSelectedDiaryIndex(index);\r\n    setSelectedDate(sortedDiaryEntries[index].date); \r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleCloseDiaryModal = () => {\r\n    setSelectedDiaryIndex(null);\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      <p>{selectedYearMonth}</p>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectEmojiDate}  // 날짜 선택 후 일기 작성 모달을 엽니다.\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedDate={selectedDate}  // 선택된 날짜를 전달합니다.\r\n          selectedText={diaryEntries[selectedDiaryIndex]?.text}\r\n          selectedIndex={selectedDiaryIndex}\r\n        />\r\n      )}\r\n\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n        {sortedDiaryEntries.map((entry, index) => (\r\n          <div key={index} onClick={() => entry && handleOpenDiaryModal(index)}>\r\n            {entry?.emoji}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;\r\n\r\n\r\n// HomeComponent.js\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/diaryEntries')\r\n      .then(response => setDiaryEntries(response.data));\r\n  }, []);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.post('/api/diaryEntries', newEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setDiaryEntries([\r\n            ...diaryEntries,\r\n            newEntry\r\n          ]);\r\n          setSelectedEmoji('');\r\n          setDiaryModalShown(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleEditDiary = (diaryText, selectedDate, index) => {\r\n    const editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\n    axios.put(`/api/diaryEntries/${index}`, editedEntry)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries[index] = editedEntry;\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleDeleteDiary = (index) => {\r\n    axios.delete(`/api/diaryEntries/${index}`)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          const newDiaryEntries = [...diaryEntries];\r\n          newDiaryEntries.splice(index, 1);\r\n          setDiaryEntries(newDiaryEntries);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onEdit={handleEditDiary}\r\n          onDelete={handleDeleteDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      <ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState(\r\n    JSON.parse(localStorage.getItem('diaryEntries')) || []\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\r\n  }, [diaryEntries]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate) => {\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      { date: selectedDate, emoji: selectedEmoji, text: diaryText }\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleSelectEmoji}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      /* 일기 목록 렌더링 */\r\n      /*<ul>\r\n        {diaryEntries.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoji} - {entry.text}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;*/\r\n"],"mappings":"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GAAbpE,aAAa;AAuJnB,eAAeA,aAAa;;AAG5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVM,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}