{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\n\nimport React, { useState } from 'react';\nimport { useUser } from './UserContext';\nimport CalendarModal from './CalendarModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const {\n    user,\n    addDiaryEntry,\n    updateUser\n  } = useUser();\n  const [newDiaryDate, setNewDiaryDate] = useState('');\n  const [newDiaryEmoticon, setNewDiaryEmoticon] = useState('');\n  const [newDiaryText, setNewDiaryText] = useState('');\n  const [showCalendarModal, setShowCalendarModal] = useState(false);\n  const handleAddDiary = () => {\n    if (newDiaryDate && newDiaryEmoticon && newDiaryText) {\n      addDiaryEntry(newDiaryDate, newDiaryEmoticon, newDiaryText);\n      // 추가 후 입력 필드 초기화\n      setNewDiaryDate('');\n      setNewDiaryEmoticon('');\n      setNewDiaryText('');\n    } else {\n      alert('Please fill in all fields.');\n    }\n  };\n  const handleShowCalendarModal = () => {\n    setShowCalendarModal(true);\n  };\n  const handleCloseCalendarModal = () => {\n    setShowCalendarModal(false);\n  };\n  const handleYearMonthSelect = async (selectedYear, selectedMonth) => {\n    try {\n      // 서버에 선택된 년도와 달에 따른 달력 정보를 요청\n      const response = await fetch(`서버의 API 주소/${selectedYear}/${selectedMonth}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch calendar data');\n      }\n\n      // 서버에서 받아온 달력 정보\n      const calendarData = await response.json();\n\n      // 받아온 달력 정보를 사용하여 화면 업데이트 또는 추가적인 로직 수행\n      // 예를 들어, UserContext를 사용하여 상태 업데이트\n      updateUserCalendarData(calendarData);\n\n      // 모달 닫기\n      handleCloseCalendarModal();\n    } catch (error) {\n      // 에러 처리\n      console.error(error.message);\n    }\n  };\n  const updateUserCalendarData = newCalendarData => {\n    // UserContext에서 제공되는 함수를 사용하여 사용자의 달력 데이터 업데이트\n    updateUser({\n      ...user,\n      calendarData: newCalendarData\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", user.username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add New Diary Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: newDiaryDate,\n        onChange: e => setNewDiaryDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Emoticon:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newDiaryEmoticon,\n        onChange: e => setNewDiaryEmoticon(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Diary:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newDiaryText,\n        onChange: e => setNewDiaryText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddDiary,\n        children: \"Add Diary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Diary Entries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Array.isArray(user.calendarData) && user.calendarData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [entry.date, \" - \", entry.emoticon, \" - \", entry.diary]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowCalendarModal,\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), showCalendarModal && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onClose: handleCloseCalendarModal,\n      onYearMonthSelect: handleYearMonthSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeComponent, \"q1laLSG8wSfmUVEEfTIm1bAhyHw=\", false, function () {\n  return [useUser];\n});\n_c = HomeComponent;\nexport default HomeComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useUser","CalendarModal","jsxDEV","_jsxDEV","HomeComponent","_s","user","addDiaryEntry","updateUser","newDiaryDate","setNewDiaryDate","newDiaryEmoticon","setNewDiaryEmoticon","newDiaryText","setNewDiaryText","showCalendarModal","setShowCalendarModal","handleAddDiary","alert","handleShowCalendarModal","handleCloseCalendarModal","handleYearMonthSelect","selectedYear","selectedMonth","response","fetch","ok","Error","calendarData","json","updateUserCalendarData","error","console","message","newCalendarData","children","username","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","Array","isArray","map","entry","index","date","emoticon","diary","onClose","onYearMonthSelect","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { useUser } from './UserContext';\r\nimport CalendarModal from './CalendarModal';\r\n\r\nconst HomeComponent = () => {\r\n\r\n  const { user, addDiaryEntry, updateUser } = useUser();\r\n  const [newDiaryDate, setNewDiaryDate] = useState('');\r\n  const [newDiaryEmoticon, setNewDiaryEmoticon] = useState('');\r\n  const [newDiaryText, setNewDiaryText] = useState('');\r\n  const [showCalendarModal, setShowCalendarModal] = useState(false);\r\n\r\n  const handleAddDiary = () => {\r\n    if (newDiaryDate && newDiaryEmoticon && newDiaryText) {\r\n      addDiaryEntry(newDiaryDate, newDiaryEmoticon, newDiaryText);\r\n      // 추가 후 입력 필드 초기화\r\n      setNewDiaryDate('');\r\n      setNewDiaryEmoticon('');\r\n      setNewDiaryText('');\r\n    } else {\r\n      alert('Please fill in all fields.');\r\n    }\r\n  };\r\n\r\n  const handleShowCalendarModal = () => {\r\n    setShowCalendarModal(true);\r\n  };\r\n\r\n  const handleCloseCalendarModal = () => {\r\n    setShowCalendarModal(false);\r\n  };\r\n\r\n  const handleYearMonthSelect = async (selectedYear, selectedMonth) => {\r\n    try {\r\n      // 서버에 선택된 년도와 달에 따른 달력 정보를 요청\r\n      const response = await fetch(`서버의 API 주소/${selectedYear}/${selectedMonth}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch calendar data');\r\n      }\r\n  \r\n      // 서버에서 받아온 달력 정보\r\n      const calendarData = await response.json();\r\n  \r\n      // 받아온 달력 정보를 사용하여 화면 업데이트 또는 추가적인 로직 수행\r\n      // 예를 들어, UserContext를 사용하여 상태 업데이트\r\n      updateUserCalendarData(calendarData);\r\n  \r\n      // 모달 닫기\r\n      handleCloseCalendarModal();\r\n  \r\n    } catch (error) {\r\n      // 에러 처리\r\n      console.error(error.message);\r\n    }\r\n  };\r\n  \r\n  const updateUserCalendarData = (newCalendarData) => {\r\n    // UserContext에서 제공되는 함수를 사용하여 사용자의 달력 데이터 업데이트\r\n    updateUser({ ...user, calendarData: newCalendarData });\r\n  };\r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Welcome, {user.username}!</h2>\r\n\r\n      {/* 일기 추가 폼 */}\r\n      <div>\r\n        <h3>Add New Diary Entry</h3>\r\n        <label>Date:</label>\r\n        <input type=\"date\" value={newDiaryDate} onChange={(e) => setNewDiaryDate(e.target.value)} />\r\n        <label>Emoticon:</label>\r\n        <input type=\"text\" value={newDiaryEmoticon} onChange={(e) => setNewDiaryEmoticon(e.target.value)} />\r\n        <label>Diary:</label>\r\n        <textarea value={newDiaryText} onChange={(e) => setNewDiaryText(e.target.value)} />\r\n        <button onClick={handleAddDiary}>Add Diary</button>\r\n      </div>\r\n\r\n      {/* 사용자의 일기 목록 */}\r\n      <div>\r\n        <h3>Your Diary Entries</h3>\r\n        <ul>\r\n        {Array.isArray(user.calendarData) && user.calendarData.map((entry, index) => (\r\n          <li key={index}>\r\n            {entry.date} - {entry.emoticon} - {entry.diary}\r\n          </li>\r\n        ))}\r\n        </ul>\r\n    </div>\r\n\r\n    {/* 모달 표시 버튼 */}\r\n    <button onClick={handleShowCalendarModal}>Select Year and Month</button>\r\n\r\n    {/* 년도 및 달 선택 모달 */}\r\n    {showCalendarModal && (\r\n      <CalendarModal onClose={handleCloseCalendarModal} onYearMonthSelect={handleYearMonthSelect} />\r\n    )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}