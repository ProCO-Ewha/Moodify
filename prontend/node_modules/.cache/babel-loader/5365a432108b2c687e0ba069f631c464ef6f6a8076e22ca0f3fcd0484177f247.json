{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\n\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\n\n// 가상의 응답을 생성\n/*setDiaryEntries([\r\n  ...diaryEntries,\r\n  newEntry\r\n]);\r\nsetSelectedEmoji('');\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleYearMonthClick = () => {\r\nsetModalOpen(prevState => !prevState);\r\n};\r\nconst handleSelect = (date) => {\r\nsetSelectedYearMonth(date);\r\n};\r\nconst handleClose = () => {\r\nsetModalOpen(false);\r\n};\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\nconst handleOpenEmojiModal = () => {\r\nsetSelectedDiary(null); // 추가된 부분\r\nsetEmojiModalShown(!emojiModalShown);\r\n};\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetAddDiaryModalShown(true); // 추가된 부분\r\n};\r\nconst sortedDiaryEntries = diaryEntries\r\n  .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    const handleOpenDiaryModal = (index) => {\r\n    setIsAdding(false); // 추가된 부분\r\n    setSelectedDiary(sortedDiaryEntries[index]);\r\n    setDiaryModalShown(true);\r\n  };\r\nconst handleCloseDiaryModal = () => {\r\nsetSelectedDiaryIndex(null);\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleOpenSettingPage = () => {\r\nnavigate('/Setting'); // Setting.js로 이동\r\n};\r\nconst handleOpenFindfriendsPage = () =>{\r\nnavigate('/Findfriends');\r\n}\r\nreturn (\r\n<div>\r\n    <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\n/*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n<button onClick={handleOpenEmojiModal}>+</button>\r\n<button onClick={handleOpenSettingPage}>\r\n  <img src=\"/images/setting.png\"/>\r\n</button>\r\n<button onClick={handleOpenFindfriendsPage}>\r\n  <img src=\"/images/user.png\"/>\r\n</button>\r\n\r\n{calendarModalShown && (\r\n<CalendarModal\r\nonSelect={handleSelectDate}\r\nonClose={() => setCalendarModalShown(false)}\r\n/>\r\n)}\r\n{emojiModalShown && (\r\n<EmojiModal\r\nonSelect={handleOpenAddDiaryModal} // 변경된 부분\r\nonClose={() => setEmojiModalShown(false)}\r\n/>\r\n)}\r\n{addDiaryModalShown && (\r\n<AddDiaryModal // 추가된 부분\r\nonAdd={handleAddDiary}\r\nonClose={() => setAddDiaryModalShown(false)}\r\nselectedEmoji={selectedEmoji}\r\n/>\r\n)}\r\n{diaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={handleCloseDiaryModal}\r\n    selectedEmoji={selectedEmoji}\r\n    selectedImage={selectedImage} // New\r\n    setSelectedImage={setSelectedImage} // New\r\n  />\r\n)}\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n{sortedDiaryEntries.map((entry, index) => (\r\n<div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n{entry?.emoji}\r\n</div>\r\n))}\r\n</div>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\n\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport ViewDiaryModal from './ViewDiaryModal';\nimport FriendsList from './FriendsList'; // 추가된 부분\nimport FriendDiaryList from './FriendDiaryList';\nimport { useNavigate } from 'react-router-dom';\nimport './HomeComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedFriendId, setSelectedFriendId] = useState(null);\n  const [diaries, setDiaries] = useState([]);\n  const navigate = useNavigate();\n  const [friends, setFriends] = useState([{\n    id: 1,\n    nickname: 'friend1'\n  }, {\n    id: 2,\n    nickname: 'friend2'\n  }, {\n    id: 3,\n    nickname: 'friend1'\n  }, {\n    id: 4,\n    nickname: 'friend2'\n  }, {\n    id: 5,\n    nickname: 'friend1'\n  }, {\n    id: 6,\n    nickname: 'friend2'\n  }, {\n    id: 7,\n    nickname: 'friend1'\n  }, {\n    id: 8,\n    nickname: 'friend2'\n  }, {\n    id: 9,\n    nickname: 'friend1'\n  }, {\n    id: 10,\n    nickname: 'friend2'\n  }\n  // ...\n  ]);\n  useEffect(() => {\n    axios.get('api/diaryEntries').then(response => setDiaryEntries(response.data));\n  }, []);\n\n  /*useEffect(() => {\r\n    if (selectedYearMonth) {\r\n      // 가짜 데이터\r\n      const fakeData = [\r\n        { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n        { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n        { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n      ];\r\n      setDiaryEntries(fakeData);\r\n    }\r\n  }, [selectedYearMonth]);*/\n\n  useEffect(() => {\n    // 친구 목록을 가지고 오는 API 호출\n    axios.get('/api/friends').then(response => setFriends(response.data));\n  }, []);\n  useEffect(() => {\n    // 선택한 친구의 일기 목록을 가지고 오는 API 호출\n    if (selectedFriendId) {\n      axios.get(`/api/diaries/${selectedFriendId}`).then(response => setDiaries(response.data));\n    }\n  }, [selectedFriendId]);\n  const handleAddDiary = (diaryText, selectedDate) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText\n    };\n    axios.post('/api/diaryEntries', newEntry).then(response => {\n      if (response.status === 200) {\n        setDiaryEntries([...diaryEntries, newEntry]);\n        setSelectedEmoji('');\n        setDiaryModalShown(false);\n      }\n    });\n  };\n  const handleYearMonthClick = () => {\n    setModalOpen(prevState => !prevState);\n  };\n  const handleSelect = date => {\n    setSelectedYearMonth(date);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n  const handleSelectEmoji = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setDiaryModalShown(true);\n  };\n  const handleSelectDate = yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n  };\n  const handleOpenEmojiModal = () => {\n    setSelectedDiary(null); // 추가된 부분\n    setEmojiModalShown(!emojiModalShown);\n  };\n  const handleOpenAddDiaryModal = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setAddDiaryModalShown(true); // 추가된 부분\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)) // Add this line\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\n  const handleOpenDiaryModal = index => {\n    setIsAdding(false); // 추가된 부분\n    setSelectedDiary(sortedDiaryEntries[index]);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  const handleOpenSettingPage = () => {\n    navigate('/Setting'); // Setting.js로 이동\n  };\n  const handleOpenFindfriendsPage = () => {\n    navigate('/Findfriends');\n  };\n  const handleLike = id => {\n    // 좋아요 기능을 처리하는 함수\n    axios.post(`/api/diaries/${id}/like`).then(response => {\n      if (response.status === 200) {\n        setDiaries(diaries.map(diary => diary.id === id ? {\n          ...diary,\n          isLiked: !diary.isLiked\n        } : diary));\n      }\n    });\n  };\n  const handleFriendClick = async friendId => {\n    // 백엔드에 친구의 최신 달력 정보를 요청\n    const response = await axios.get(`/api/friends/${friendId}/latest-calendar`);\n    const {\n      year,\n      month\n    } = response.data;\n    // 받은 정보로 해당 친구의 달력 페이지로 이동\n    navigate(`/friend-calendar/${friendId}/${year}-${month}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCalendarModalShown(!calendarModalShown),\n        className: \"button-select-year\",\n        children: \"Select Year and Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 6\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedYearMonth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 5\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(FriendsList, {\n      onFriendClick: handleFriendClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      className: \"button-add-emoji\",\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenSettingPage,\n      className: \"button-settings\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/setting.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenFindfriendsPage,\n      className: \"button-find-friends\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/user.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleOpenAddDiaryModal // 변경된 부분\n      ,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 3\n    }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(DiaryModal, {\n      onAdd: handleAddDiary,\n      onClose: () => setAddDiaryModalShown(false),\n      selectedEmoji: selectedEmoji\n      //selectedImage={selectedImage} // 추가된 부분\n      //setSelectedImage={setSelectedImage} // 추가된 부분\n      ,\n      isAdding: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 3\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(ViewDiaryModal, {\n      onClose: handleCloseDiaryModal,\n      selectedDiary: selectedDiary\n      //selectedImage={selectedImage} // 추가된 부분\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 3\n  }, this);\n};\n_s(HomeComponent, \"FxBzmPFYuCeM39jFinsWpLjcuJA=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeComponent;\nexport default HomeComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","ViewDiaryModal","FriendsList","FriendDiaryList","useNavigate","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","selectedFriendId","setSelectedFriendId","diaries","setDiaries","navigate","friends","setFriends","id","nickname","get","then","response","data","handleAddDiary","diaryText","newEntry","date","emoji","text","post","status","handleYearMonthClick","prevState","handleSelect","handleClose","handleSelectEmoji","handleSelectDate","yearMonth","handleOpenEmojiModal","handleOpenAddDiaryModal","sortedDiaryEntries","filter","entry","startsWith","sort","a","b","Date","handleOpenDiaryModal","index","handleCloseDiaryModal","handleOpenSettingPage","handleOpenFindfriendsPage","handleLike","map","diary","isLiked","handleFriendClick","friendId","year","month","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onClose","onFriendClick","src","onAdd","style","display","gridTemplateColumns","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  /*setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nreturn (\r\n  <div>\r\n      <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\r\n      /*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedImage={selectedImage} // New\r\n          setSelectedImage={setSelectedImage} // New\r\n        />\r\n      )}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\nexport default HomeComponent;*/\r\n\r\n// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport FriendsList from './FriendsList'; // 추가된 부분\r\nimport FriendDiaryList from './FriendDiaryList'; \r\nimport { useNavigate } from 'react-router-dom';\r\nimport './HomeComponent.css'\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedFriendId, setSelectedFriendId] = useState(null); \r\nconst [diaries, setDiaries] = useState([]);\r\nconst navigate = useNavigate();\r\nconst [friends, setFriends] = useState([\r\n  { id: 1, nickname: 'friend1' },\r\n  { id: 2, nickname: 'friend2' },\r\n  { id: 3, nickname: 'friend1' },\r\n  { id: 4, nickname: 'friend2' },\r\n  { id: 5, nickname: 'friend1' },\r\n  { id: 6, nickname: 'friend2' },\r\n  { id: 7, nickname: 'friend1' },\r\n  { id: 8, nickname: 'friend2' },\r\n  { id: 9, nickname: 'friend1' },\r\n  { id: 10, nickname: 'friend2' },\r\n  // ...\r\n]);\r\n\r\n\r\nuseEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);*/\r\n\r\nuseEffect(() => {\r\n  // 친구 목록을 가지고 오는 API 호출\r\n  axios.get('/api/friends')\r\n    .then(response => setFriends(response.data));\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  // 선택한 친구의 일기 목록을 가지고 오는 API 호출\r\n  if (selectedFriendId) {\r\n    axios.get(`/api/diaries/${selectedFriendId}`)\r\n      .then(response => setDiaries(response.data));\r\n  }\r\n}, [selectedFriendId]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate) => {\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText};\r\n\r\n  axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nconst handleLike = (id) => {\r\n  // 좋아요 기능을 처리하는 함수\r\n  axios.post(`/api/diaries/${id}/like`)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaries(diaries.map(diary => diary.id === id ? { ...diary, isLiked: !diary.isLiked } : diary));\r\n      }\r\n    });\r\n};\r\n\r\nconst handleFriendClick = async (friendId) => {\r\n  // 백엔드에 친구의 최신 달력 정보를 요청\r\n  const response = await axios.get(`/api/friends/${friendId}/latest-calendar`);\r\n  const { year, month } = response.data;\r\n  // 받은 정보로 해당 친구의 달력 페이지로 이동\r\n  navigate(`/friend-calendar/${friendId}/${year}-${month}`);\r\n};\r\n\r\nreturn (\r\n  <div>\r\n     <div className=\"button-container\">\r\n    <button onClick={() => setCalendarModalShown(!calendarModalShown)} className=\"button-select-year\">Select Year and Month</button>\r\n     </div>\r\n     {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n     )}\r\n     <div className=\"header-container\">\r\n    <h2>{selectedYearMonth}</h2> {/* 선택한 년도와 월 표시 */}\r\n    </div>\r\n    <FriendsList onFriendClick={handleFriendClick} />\r\n      <button onClick={handleOpenEmojiModal} className=\"button-add-emoji\">+</button>\r\n      <button onClick={handleOpenSettingPage} className=\"button-settings\">\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage} className=\"button-find-friends\">\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n\r\n      \r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n    //selectedImage={selectedImage} // 추가된 부분\r\n    //setSelectedImage={setSelectedImage} // 추가된 부분\r\n    isAdding={true}\r\n  />\r\n)}\r\n\r\n\r\n{diaryModalShown && (\r\n  <ViewDiaryModal\r\n    onClose={handleCloseDiaryModal}\r\n    selectedDiary={selectedDiary}\r\n    //selectedImage={selectedImage} // 추가된 부분\r\n  />\r\n)}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AACzC,OAAO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"},"metadata":{},"sourceType":"module","externalDependencies":[]}