{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jenny\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\moodify\\\\moodify\\\\prontend\\\\src\\\\HomeComponent.js\",\n  _s = $RefreshSig$();\n// HomeComponent.js\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\n\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\n\n// 가상의 응답을 생성\n/*setDiaryEntries([\r\n  ...diaryEntries,\r\n  newEntry\r\n]);\r\nsetSelectedEmoji('');\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\nconst handleYearMonthClick = () => {\r\nsetModalOpen(prevState => !prevState);\r\n};\r\nconst handleSelect = (date) => {\r\nsetSelectedYearMonth(date);\r\n};\r\nconst handleClose = () => {\r\nsetModalOpen(false);\r\n};\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\nconst handleOpenEmojiModal = () => {\r\nsetSelectedDiary(null); // 추가된 부분\r\nsetEmojiModalShown(!emojiModalShown);\r\n};\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetAddDiaryModalShown(true); // 추가된 부분\r\n};\r\nconst sortedDiaryEntries = diaryEntries\r\n  .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n  .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n    const handleOpenDiaryModal = (index) => {\r\n    setIsAdding(false); // 추가된 부분\r\n    setSelectedDiary(sortedDiaryEntries[index]);\r\n    setDiaryModalShown(true);\r\n  };\r\nconst handleCloseDiaryModal = () => {\r\nsetSelectedDiaryIndex(null);\r\nsetDiaryModalShown(false);\r\n};\r\nconst handleOpenSettingPage = () => {\r\nnavigate('/Setting'); // Setting.js로 이동\r\n};\r\nconst handleOpenFindfriendsPage = () =>{\r\nnavigate('/Findfriends');\r\n}\r\nreturn (\r\n<div>\r\n    <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\n/*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n<button onClick={handleOpenEmojiModal}>+</button>\r\n<button onClick={handleOpenSettingPage}>\r\n  <img src=\"/images/setting.png\"/>\r\n</button>\r\n<button onClick={handleOpenFindfriendsPage}>\r\n  <img src=\"/images/user.png\"/>\r\n</button>\r\n\r\n{calendarModalShown && (\r\n<CalendarModal\r\nonSelect={handleSelectDate}\r\nonClose={() => setCalendarModalShown(false)}\r\n/>\r\n)}\r\n{emojiModalShown && (\r\n<EmojiModal\r\nonSelect={handleOpenAddDiaryModal} // 변경된 부분\r\nonClose={() => setEmojiModalShown(false)}\r\n/>\r\n)}\r\n{addDiaryModalShown && (\r\n<AddDiaryModal // 추가된 부분\r\nonAdd={handleAddDiary}\r\nonClose={() => setAddDiaryModalShown(false)}\r\nselectedEmoji={selectedEmoji}\r\n/>\r\n)}\r\n{diaryModalShown && (\r\n  <DiaryModal\r\n    onAdd={handleAddDiary}\r\n    onClose={handleCloseDiaryModal}\r\n    selectedEmoji={selectedEmoji}\r\n    selectedImage={selectedImage} // New\r\n    setSelectedImage={setSelectedImage} // New\r\n  />\r\n)}\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n{sortedDiaryEntries.map((entry, index) => (\r\n<div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n{entry?.emoji}\r\n</div>\r\n))}\r\n</div>\r\n</div>\r\n);\r\n};\r\nexport default HomeComponent;*/\n\n// HomeComponent.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CalendarModal from './CalendarModal';\nimport EmojiModal from './EmojiModal';\nimport DiaryModal from './DiaryModal';\nimport AddDiaryModal from './AddDiaryModal';\nimport ViewDiaryModal from './ViewDiaryModal';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomeComponent = () => {\n  _s();\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('');\n  const [diaryEntries, setDiaryEntries] = useState([]);\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedDiary, setSelectedDiary] = useState(null);\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (selectedYearMonth) {\n      const fakeData = [{\n        date: '2024-01-01',\n        emoji: '😊',\n        text: 'Happy New Year!'\n      }, {\n        date: '2024-01-02',\n        emoji: '😍',\n        text: 'I love the start of the year.'\n      }, {\n        date: '2024-02-14',\n        emoji: '😊',\n        text: 'Happy Valentine\\'s Day!'\n      }];\n      setDiaryEntries(fakeData);\n    }\n  }, [selectedYearMonth]);\n  const handleAddDiary = (diaryText, selectedDate, selectedImage) => {\n    const newEntry = {\n      date: selectedDate,\n      emoji: selectedEmoji,\n      text: diaryText,\n      image: selectedImage\n    };\n    setDiaryEntries([...diaryEntries, newEntry]);\n    setSelectedEmoji('');\n    setDiaryModalShown(false);\n    setSelectedImage(null);\n  };\n  const handleOpenDiaryModal = index => {\n    setIsAdding(false);\n    setSelectedDiary(sortedDiaryEntries[index]);\n    setDiaryModalShown(true);\n  };\n  const handleCloseDiaryModal = () => {\n    setSelectedDiaryIndex(null);\n    setDiaryModalShown(false);\n  };\n  const handleOpenEmojiModal = () => {\n    setEmojiModalShown(!emojiModalShown);\n  };\n  const handleOpenAddDiaryModal = emoji => {\n    setSelectedEmoji(emoji);\n    setEmojiModalShown(false);\n    setAddDiaryModalShown(true);\n  };\n  const handleSelectDate = yearMonth => {\n    setSelectedYearMonth(yearMonth);\n    setCalendarModalShown(false);\n  };\n  const handleOpenSettingPage = () => {\n    navigate('/Setting');\n  };\n  const handleOpenFindfriendsPage = () => {\n    navigate('/Findfriends');\n  };\n  const sortedDiaryEntries = diaryEntries.filter(entry => entry.date.startsWith(selectedYearMonth)).sort((a, b) => new Date(a.date) - new Date(b.date));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedYearMonth\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCalendarModalShown(true),\n      children: \"Select Year and Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenEmojiModal,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenSettingPage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/setting.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenFindfriendsPage,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/user.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), calendarModalShown && /*#__PURE__*/_jsxDEV(CalendarModal, {\n      onSelect: handleSelectDate,\n      onClose: () => setCalendarModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }, this), emojiModalShown && /*#__PURE__*/_jsxDEV(EmojiModal, {\n      onSelect: handleOpenAddDiaryModal,\n      onClose: () => setEmojiModalShown(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }, this), addDiaryModalShown && /*#__PURE__*/_jsxDEV(AddDiaryModal, {\n      onAdd: handleAddDiary,\n      onClose: () => setAddDiaryModalShown(false),\n      selectedEmoji: selectedEmoji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }, this), diaryModalShown && /*#__PURE__*/_jsxDEV(DiaryModal, {\n      onAdd: handleAddDiary,\n      onClose: handleCloseDiaryModal,\n      selectedEmoji: selectedEmoji,\n      selectedImage: selectedImage,\n      setSelectedImage: setSelectedImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(5, 1fr)'\n      },\n      children: sortedDiaryEntries.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleOpenDiaryModal(index),\n        children: entry === null || entry === void 0 ? void 0 : entry.emoji\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeComponent, \"JMn0M21iGSrhWPy0nKkqE7bj0gQ=\", false, function () {\n  return [useNavigate];\n});\n_c = HomeComponent;\nexport default HomeComponent;\nvar _c;\n$RefreshReg$(_c, \"HomeComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","CalendarModal","EmojiModal","DiaryModal","AddDiaryModal","ViewDiaryModal","useNavigate","jsxDEV","_jsxDEV","HomeComponent","_s","calendarModalShown","setCalendarModalShown","emojiModalShown","setEmojiModalShown","diaryModalShown","setDiaryModalShown","selectedEmoji","setSelectedEmoji","diaryEntries","setDiaryEntries","selectedYearMonth","setSelectedYearMonth","selectedDiaryIndex","setSelectedDiaryIndex","selectedDate","setSelectedDate","selectedDiary","setSelectedDiary","addDiaryModalShown","setAddDiaryModalShown","isAdding","setIsAdding","isModalOpen","setModalOpen","selectedImage","setSelectedImage","navigate","fakeData","date","emoji","text","handleAddDiary","diaryText","newEntry","image","handleOpenDiaryModal","index","sortedDiaryEntries","handleCloseDiaryModal","handleOpenEmojiModal","handleOpenAddDiaryModal","handleSelectDate","yearMonth","handleOpenSettingPage","handleOpenFindfriendsPage","filter","entry","startsWith","sort","a","b","Date","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","onSelect","onClose","onAdd","style","display","gridTemplateColumns","map","_c","$RefreshReg$"],"sources":["C:/Users/jenny/OneDrive/바탕 화면/moodify/moodify/prontend/src/HomeComponent.js"],"sourcesContent":["// HomeComponent.js\r\n/*import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal'; // 추가된 부분\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\nconst [calendarModalShown, setCalendarModalShown] = useState(false);\r\nconst [emojiModalShown, setEmojiModalShown] = useState(false);\r\nconst [diaryModalShown, setDiaryModalShown] = useState(false);\r\nconst [selectedEmoji, setSelectedEmoji] = useState('');\r\nconst [diaryEntries, setDiaryEntries] = useState([]);\r\nconst [selectedYearMonth, setSelectedYearMonth] = useState('');\r\nconst [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\nconst [selectedDate, setSelectedDate] = useState('');\r\nconst [selectedDiary, setSelectedDiary] = useState(null);\r\nconst [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\nconst [isAdding, setIsAdding] = useState(false);\r\nconst [isModalOpen, setModalOpen] = useState(false);\r\nconst [selectedImage, setSelectedImage] = useState(null); \r\nconst navigate = useNavigate();\r\n\r\n\r\n/*useEffect(() => {\r\naxios.get('api/diaryEntries')\r\n.then(response => setDiaryEntries(response.data));\r\n}, []);*/\r\n\r\n/*useEffect(() => {\r\n  if (selectedYearMonth) {\r\n    // 가짜 데이터\r\n    const fakeData = [\r\n      { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n      { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n      { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n    ];\r\n    setDiaryEntries(fakeData);\r\n  }\r\n}, [selectedYearMonth]);\r\n\r\nconst handleAddDiary = (diaryText, selectedDate, selectedImage) => { // Updated\r\n  const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage }; // Updated\r\n  setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n  setSelectedImage(null); // New\r\n};\r\n  \r\n  /*axios.post('/api/diaryEntries', newEntry)\r\n    .then(response => {\r\n      if (response.status === 200) {\r\n        setDiaryEntries([\r\n          ...diaryEntries,\r\n          newEntry\r\n        ]);\r\n        setSelectedEmoji('');\r\n        setDiaryModalShown(false);\r\n      }\r\n    });*/\r\n  \r\n  // 가상의 응답을 생성\r\n  /*setDiaryEntries([\r\n    ...diaryEntries,\r\n    newEntry\r\n  ]);\r\n  setSelectedEmoji('');\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleEditDiary = (diaryText, selectedDate, index) => {\r\nconst editedEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText };\r\naxios.put(`api/diaryEntries/${index}`, editedEntry)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries[index] = editedEntry;\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleDeleteDiary = (index) => {\r\naxios.delete(`api/diaryEntries/${index}`)\r\n.then(response => {\r\nif (response.status === 200) {\r\nconst newDiaryEntries = [...diaryEntries];\r\nnewDiaryEntries.splice(index, 1);\r\nsetDiaryEntries(newDiaryEntries);\r\n}\r\n});\r\n};\r\n\r\nconst handleYearMonthClick = () => {\r\n  setModalOpen(prevState => !prevState);\r\n};\r\n\r\nconst handleSelect = (date) => {\r\n  setSelectedYearMonth(date);\r\n};\r\n\r\nconst handleClose = () => {\r\n  setModalOpen(false);\r\n};\r\n\r\n\r\nconst handleSelectEmoji = (emoji) => {\r\nsetSelectedEmoji(emoji);\r\nsetEmojiModalShown(false);\r\nsetDiaryModalShown(true);\r\n};\r\n\r\nconst handleSelectDate = (yearMonth) => {\r\nsetSelectedYearMonth(yearMonth);\r\nsetCalendarModalShown(false);\r\n};\r\n\r\nconst handleOpenEmojiModal = () => {\r\n  setSelectedDiary(null); // 추가된 부분\r\n  setEmojiModalShown(!emojiModalShown);\r\n};\r\n\r\nconst handleOpenAddDiaryModal = (emoji) => {\r\n  setSelectedEmoji(emoji);\r\n  setEmojiModalShown(false);\r\n  setAddDiaryModalShown(true); // 추가된 부분\r\n};\r\n\r\nconst sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))  // Add this line\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n    const handleOpenDiaryModal = (index) => {\r\n      setIsAdding(false); // 추가된 부분\r\n      setSelectedDiary(sortedDiaryEntries[index]);\r\n      setDiaryModalShown(true);\r\n    };\r\n\r\nconst handleCloseDiaryModal = () => {\r\n  setSelectedDiaryIndex(null);\r\n  setDiaryModalShown(false);\r\n};\r\n\r\nconst handleOpenSettingPage = () => {\r\n  navigate('/Setting'); // Setting.js로 이동\r\n};\r\n\r\nconst handleOpenFindfriendsPage = () =>{\r\n  navigate('/Findfriends');\r\n}\r\n\r\nreturn (\r\n  <div>\r\n      <h2>{selectedYearMonth}</h2> /* 선택한 년도와 월 표시 */\r\n      /*<button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n      \r\n\r\n\r\n  {calendarModalShown && (\r\n    <CalendarModal\r\n      onSelect={handleSelectDate}\r\n      onClose={() => setCalendarModalShown(false)}\r\n    />\r\n  )}\r\n\r\n{emojiModalShown && (\r\n  <EmojiModal\r\n    onSelect={handleOpenAddDiaryModal} // 변경된 부분\r\n    onClose={() => setEmojiModalShown(false)}\r\n  />\r\n)}\r\n\r\n{addDiaryModalShown && (\r\n  <AddDiaryModal // 추가된 부분\r\n    onAdd={handleAddDiary}\r\n    onClose={() => setAddDiaryModalShown(false)}\r\n    selectedEmoji={selectedEmoji}\r\n  />\r\n)}\r\n\r\n{diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedImage={selectedImage} // New\r\n          setSelectedImage={setSelectedImage} // New\r\n        />\r\n      )}\r\n\r\n<div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n  {sortedDiaryEntries.map((entry, index) => (\r\n    <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n      {entry?.emoji}\r\n    </div>\r\n  ))}\r\n</div>\r\n</div>\r\n  );\r\n};\r\nexport default HomeComponent;*/\r\n\r\n// HomeComponent.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CalendarModal from './CalendarModal';\r\nimport EmojiModal from './EmojiModal';\r\nimport DiaryModal from './DiaryModal';\r\nimport AddDiaryModal from './AddDiaryModal';\r\nimport ViewDiaryModal from './ViewDiaryModal'; \r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HomeComponent = () => {\r\n  const [calendarModalShown, setCalendarModalShown] = useState(false);\r\n  const [emojiModalShown, setEmojiModalShown] = useState(false);\r\n  const [diaryModalShown, setDiaryModalShown] = useState(false);\r\n  const [selectedEmoji, setSelectedEmoji] = useState('');\r\n  const [diaryEntries, setDiaryEntries] = useState([]);\r\n  const [selectedYearMonth, setSelectedYearMonth] = useState('');\r\n  const [selectedDiaryIndex, setSelectedDiaryIndex] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [selectedDiary, setSelectedDiary] = useState(null);\r\n  const [addDiaryModalShown, setAddDiaryModalShown] = useState(false);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null); \r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (selectedYearMonth) {\r\n      const fakeData = [\r\n        { date: '2024-01-01', emoji: '😊', text: 'Happy New Year!' },\r\n        { date: '2024-01-02', emoji: '😍', text: 'I love the start of the year.' },\r\n        { date: '2024-02-14', emoji: '😊', text: 'Happy Valentine\\'s Day!' },\r\n      ];\r\n      setDiaryEntries(fakeData);\r\n    }\r\n  }, [selectedYearMonth]);\r\n\r\n  const handleAddDiary = (diaryText, selectedDate, selectedImage) => {\r\n    const newEntry = { date: selectedDate, emoji: selectedEmoji, text: diaryText, image: selectedImage };\r\n    setDiaryEntries([\r\n      ...diaryEntries,\r\n      newEntry\r\n    ]);\r\n    setSelectedEmoji('');\r\n    setDiaryModalShown(false);\r\n    setSelectedImage(null);\r\n  };\r\n\r\n  const handleOpenDiaryModal = (index) => {\r\n    setIsAdding(false);\r\n    setSelectedDiary(sortedDiaryEntries[index]);\r\n    setDiaryModalShown(true);\r\n  };\r\n\r\n  const handleCloseDiaryModal = () => {\r\n    setSelectedDiaryIndex(null);\r\n    setDiaryModalShown(false);\r\n  };\r\n\r\n  const handleOpenEmojiModal = () => {\r\n    setEmojiModalShown(!emojiModalShown);\r\n  };\r\n\r\n  const handleOpenAddDiaryModal = (emoji) => {\r\n    setSelectedEmoji(emoji);\r\n    setEmojiModalShown(false);\r\n    setAddDiaryModalShown(true);\r\n  };\r\n\r\n  const handleSelectDate = (yearMonth) => {\r\n    setSelectedYearMonth(yearMonth);\r\n    setCalendarModalShown(false);\r\n  };\r\n\r\n  const handleOpenSettingPage = () => {\r\n    navigate('/Setting');\r\n  };\r\n\r\n  const handleOpenFindfriendsPage = () =>{\r\n    navigate('/Findfriends');\r\n  }\r\n\r\n  const sortedDiaryEntries = diaryEntries\r\n    .filter(entry => entry.date.startsWith(selectedYearMonth))\r\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\r\n\r\n  return (\r\n    <div>\r\n      <h2>{selectedYearMonth}</h2>\r\n      <button onClick={() => setCalendarModalShown(true)}>Select Year and Month</button>\r\n      <button onClick={handleOpenEmojiModal}>+</button>\r\n      <button onClick={handleOpenSettingPage}>\r\n        <img src=\"/images/setting.png\"/>\r\n      </button>\r\n      <button onClick={handleOpenFindfriendsPage}>\r\n        <img src=\"/images/user.png\"/>\r\n      </button>\r\n\r\n      {calendarModalShown && (\r\n        <CalendarModal\r\n          onSelect={handleSelectDate}\r\n          onClose={() => setCalendarModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {emojiModalShown && (\r\n        <EmojiModal\r\n          onSelect={handleOpenAddDiaryModal}\r\n          onClose={() => setEmojiModalShown(false)}\r\n        />\r\n      )}\r\n\r\n      {addDiaryModalShown && (\r\n        <AddDiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={() => setAddDiaryModalShown(false)}\r\n          selectedEmoji={selectedEmoji}\r\n        />\r\n      )}\r\n\r\n      {diaryModalShown && (\r\n        <DiaryModal\r\n          onAdd={handleAddDiary}\r\n          onClose={handleCloseDiaryModal}\r\n          selectedEmoji={selectedEmoji}\r\n          selectedImage={selectedImage}\r\n          setSelectedImage={setSelectedImage}\r\n        />\r\n      )}\r\n\r\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)' }}>\r\n        {sortedDiaryEntries.map((entry, index) => (\r\n          <div key={index} onClick={() => handleOpenDiaryModal(index)}>\r\n            {entry?.emoji}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeComponent;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,WAAW,Q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"},"metadata":{},"sourceType":"module","externalDependencies":[]}